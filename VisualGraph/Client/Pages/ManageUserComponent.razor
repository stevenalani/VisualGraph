@page "/account/manage"
@using System.Security.Claims

<div class="card">
    <div class="card-header">
        <span class="card-title"><span class="oi oi-person"></span> <span>Benutzerverwaltung</span></span>
    </div>
    <div class="card-body">
        <EditForm Model="UserModel" OnValidSubmit="saveMember">
            <div class="form-group form-inline">
                <label class="col-form-label">Benutzer ID:</label>
                <span class="form-control">@UserModel.Id</span>
            </div>
            <div class="form-group form-inline">
                <label class="col-form-label">Benutzername:</label>
                <span class="form-control">@UserModel.Username</span>
            </div>
            <div class="form-group form-inline">
                <label class="col-form-label" for="firstname">Vorname:</label>
                <InputText class="form-control" id="firstname" @bind-Value="UserModel.Firstname" />
            </div>
            <div class="form-group form-inline">
                <label class="col-form-label" for="name">Name:</label>
                <InputText class="form-control" id="name" @bind-Value="UserModel.Name" />
            </div>
            <div class="form-group form-inline">
                <label class="col-form-label" for="roles">Ist Administrator</label>
                <input class="form-control" type="checkbox" @bind="isAdmin" />
            </div>
            <div class="form-group form-inline">
                <label class="col-form-label" for="name">Name:</label>
                <InputText class="form-control" id="name" @bind-Value="UserModel.Name" />
            </div>
            <div class="form-group form-inline">
                <label class="col-form-label" for="newpasswd">Neues Passwort:</label>
                <InputText class="form-control" id="newpasswd" type="password" @bind-Value="UserModel.NewPassword" />
            </div>

            @if (UserModel.NewPassword != "")
            {
                <div class="form-group form-inline">
                    <label class="col-form-label" for="pwretype">Passwort <span class="font-weight-lighter">(Bestätigung)</span>:</label>
                    <InputText class="form-control" id="pwretype" type="password" @bind-Value="UserModel.RetypedPassword" />
                </div>
                <div class="form-group form-inline">
                    <label class="col-form-label" for="passwd">Altes Passwort:</label>
                    <InputText class="form-control" id="passwd" type="password" @bind-Value="UserModel.Password" />
                </div>
            }
            <p class="card-text text-danger">@UserModel.ErrorMessage</p>
            <button class="btn btn-success" type="submit">Speichern</button>
        </EditForm>
    </div>
    <div class="card-header"></div>
</div>



@code {
    UserUpdateModel UserModel = new UserUpdateModel();
    ClaimsPrincipal User;
    HttpClient httpClient;
    private bool isAdmin = false;

    override protected async Task OnInitializedAsync()
    {
        /*httpClient = HttpContextFactory.CreateClient("api");
        var response = await httpClient.GetAsync("api/account/user");
        var responseData = await response.Content.ReadAsStringAsync();
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var userModel = JsonConvert.DeserializeObject<UserModel>(responseData);
            UserModel = new UserUpdateModel
            {
                ErrorMessage = userModel.ErrorMessage,
                Firstname = userModel.Firstname,
                Id = userModel.Id,
                IsAuth = userModel.IsAuth,
                Name = userModel.Name,
                Roles = userModel.Roles,
                Username = userModel.Username
            };

            isAdmin = UserModel.Roles.Contains("Administrator");
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            User = authState.User;
        }*/
    }


    async void saveMember()
    {
        /*if(isAdmin && !User.IsInRole("Administrator"))
        {
            UserModel.Roles.Add("Administrator");
        }
        if (UserModel.Password == "" &&  (UserModel.NewPassword != "" && UserModel.NewPassword != UserModel.RetypedPassword))
        {
            UserModel.ErrorMessage = "Die eingegebenen Passwörter stimmen nicht überein";
        }
        httpClient = HttpContextFactory.CreateClient("api");
        var data = System.Text.Json.JsonSerializer.Serialize<UserUpdateModel>(UserModel);
        var content = new StringContent(data, Encoding.UTF8, "application/json");
        var response = await httpClient.PostAsync("api/account/update",content);
        */
    }
}
