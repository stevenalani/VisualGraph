@using System.Security.Claims
@inject IToastService toastService
@inherits GraphInternalUI
@if (graphService.CurrentGraphModel != null)
{
    <Modal @ref="ModalDirectional" Title="In ungerichteten Graphen umwandeln">
        <p>Vorsicht, Wenn Sie mit fortfahren wird gehen Mehrfachkanten verloren und gerichtete kanten weden zu ungerichteten</p>
        <button class="btn btn-success" @onclick="RemoveBidirectional">Umwandeln</button>
    </Modal>
    <Modal @ref="ModalSave" Title="Graph Speichern">
        <p>Vorsicht, wenn Sie fortfahren wird die Datei "@graphService.CurrentGraphModel.Name" überschrieben</p>
        <button class="btn btn-success" @onclick="SaveGraph">Speichern</button>
    </Modal>
    <h3><span class="oi oi-graph" aria-hidden="true"></span> Graphdaten bearbeiten</h3>
    <EditForm Model="@graphService.CurrentGraphModel">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">@graphService.CurrentGraphModel.Name</h5>

                <div class="form-group form-inline">
                    <div class="col">
                        <p>
                            Ist <b>@(graphService.CurrentGraphModel.IsDirected?"ein":"kein") gerichteter Graph</b><br />
                            @if (graphService.CurrentGraphModel.IsMultigraph)
                            {
                                <b>besitzt Mehrfachkanten</b><br />
                            }
                            <b>@graphService.CurrentGraphModel.Nodes.Count Knoten </b><br />
                            <b>@graphService.CurrentGraphModel.Edges.Count @(graphService.CurrentGraphModel.Edges.Count == 1?"Kante":"Kanten") </b><br />
                        </p>
                    </div>
                    <div class="col">
                        <button class="btn btn-outline-danger" @onclick="@ModalDirectional.Show">in ungerichteten Graphen umwandeln</button>
                    </div>

                </div>
                <div class="form-group form-inline">
                    <label for="GraphName" class="col-form-label text-right mr-4">Graph- Name:</label>
                    <InputText id="GraphName" class="form-control col" @bind-Value="@graphService.CurrentGraphModel.Name" @onfocusout="@(async (args) => await graphService.Rerender<BasicGraph>())"/>
                </div>

            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title"><span class="legend-node" aria-hidden="true"></span> Knoten bearbeiten</h5>
                <table class="w-100">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th class="col p-0">Name</th>
                            <th>Pos X</th>
                            <th>Pos Y</th>
                            <th>Löschen</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var node in graphService.CurrentGraphModel.Nodes)
                        {

                            var idstring1 = $"NodeX_{node.Id}";
                            var idstring2 = $"NodeY_{node.Id}";
                            var idstring3 = $"NodeName_{node.Id}";
                            <tr>
                                <td><span class="form-control">@node.Id:</span></td>
                                <td class="col p-0">
                                    <InputText id="@idstring3" class="form-control" @bind-Value="@node.Name" @onfocusout="@(async (args) => await graphService.Rerender<BasicGraph>())"/>
                                </td>
                                <td>
                                    <input type="number" @bind="@node.Pos.X" maxlength="6" size="6" style="width:6em;" id="@idstring1" class="form-control" @onfocusout="@(async (args) => await graphService.Rerender<BasicGraph>())" />
                                </td>
                                <td>
                                    <input type="number" @bind="@node.Pos.Y" maxlength="6" size="6" style="width:6em;" id="@idstring2" class="form-control" @onfocusout="@(async (args) => await graphService.Rerender<BasicGraph>())"/>
                                </td>

                                <td>
                                    <button type="button"
                                            class="form-control oi oi-delete btn btn-outline-danger"
                                            @onclick="async (args)=>
                                    {
                                        graphService.CurrentGraphModel.Edges.RemoveAll( x=> node.Edges.Contains(x));
                                        graphService.CurrentGraphModel.Nodes.Remove(node);
                                        await graphService.Rerender();
                                    }">
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-outline-success mt-4" @onclick="@AddNode">Knoten Hinzufügen</button>
                <hr />
                <h5 class="card-title"><span class="legend-edge" aria-hidden="true"></span> Kanten bearbeiten</h5>
                @if (graphService.CurrentGraphModel.Edges.Count > 0)
                {
                    <table class="w-100">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Start- Knoten</th>
                                <th>End- Knoten </th>
                                <th>Gewicht</th>
                                <th>Löschen</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var edge in graphService.CurrentGraphModel.Edges)
                            {
                                <tr>
                                    <td><span class="form-control">@edge.Id:</span></td>
                                    <td>

                                        <select class="form-control" @onchange="(args) => { ChangedStartEdge(edge, args); }">
                                            @if (edge.StartNode == null)
                                            {
                                                <option default selected="selected">Startknoten wählen</option>
                                            }
                                            @foreach (var node in graphService.CurrentGraphModel.Nodes)
                                            {
                                                if (node == edge.EndNode) continue;
                                                if (edge.StartNode == node)
                                                {
                                                    <option value="@node.Id" selected="selected">@($"Id:{node.Id}; Name:{node.Name}")</option>
                                                }
                                                else
                                                {
                                                    <option value="@node.Id">@($"Id:{node.Id}; Name:{node.Name}")</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <select class="form-control" @onchange="(args) => { ChangedEndEdge(edge, args); }">

                                            @if (edge.EndNode == null)
                                            {
                                                <option default selected="selected">Endknoten wählen</option>
                                            }
                                            else
                                            {
                                                <option default>Endknoten wählen</option>
                                            }
                                            @foreach (var node in graphService.CurrentGraphModel.Nodes)
                                            {
                                                if (node == edge.StartNode) continue;
                                                if (edge.EndNode == node)
                                                {
                                                    <option value="@node.Id" selected="selected">@($"Id:{node.Id}; Name:{node.Name}")</option>
                                                }
                                                else
                                                {
                                                    <option value="@node.Id">@($"Id:{node.Id}; Name:{node.Name}")</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <InputNumber class="form-control" @bind-Value="@edge.Weight" maxlength="6" size="6" style="width:6em;" @onfocusout="@(async (args) => await graphService.Rerender<BasicGraph>())"/>
                                    </td>
                                    <td><button type="button" class="form-control oi oi-delete btn btn-outline-danger" @onclick="(args)=> {
                                                                                                                                     graphService.CurrentGraphModel.Edges.Remove(edge);
                                                                                                                                     edge.StartNode.Edges.Remove(edge);
                                                                                                                                     edge.EndNode.Edges.Remove(edge);
                                                                                                                                 }"></button></td>

                                </tr>
                            }
                        </tbody>
                    </table>
                }
                <button type="button" class="btn btn-outline-success mt-4" @onclick="@AddEdge">Kante hinzufügen</button>
                <hr />
                <AuthorizeView Roles="Administrator, SuperUser" Context="saveButtonCtx">
                    <Authorized>
                        <button type="button" class="btn btn-outline-info" @onclick="@CheckExistsandOpenSaveGraphModal"><span class="oi oi-data-transfer-download"></span> Graph speichern </button>
                    </Authorized>
                    <NotAuthorized>
                        <p class="text-danger">Graphen können nur als angemeldeter Administrator gespeichert werden! <a href="account/login">Zum Login</a></p>
                    </NotAuthorized>
                </AuthorizeView>

            </div>
        </div>
    </EditForm>
}
@code {
    /// <summary>
    /// Speichert den Graph auf dem Server
    /// </summary>
    private async void SaveGraph()
    {
        if(graphService.CurrentGraphModel.Edges.Count == 0 || graphService.CurrentGraphModel.Nodes.Count == 0)
        {
            toastService.ShowError("Der Graph kann nicht gespeichert werden. Es müssen erst Kanten und Knoten erstellt werden");
            return;
        }
        var issaved = await graphService.SaveGraph(graphService.CurrentGraphModel.Name);
        if (issaved)
        {
            toastService.ShowSuccess("Der Graph wurde erfolgreich gespeichert!");
        }
        else
        {
            toastService.ShowError("Der Graph konnte nicht gespeichert werden!");
        }


    }
    /// <summary>
    /// Füht dem Graph einen Knoten hinzu
    /// </summary>
    private async void AddNode()
    {
        if (graphService.CurrentGraphModel.ActiveNode != null)
        {
            graphService.CurrentGraphModel.ActiveNode.IsActive = false;
        }
        Node activenode = new Node
        {
            Id = graphService.CurrentGraphModel.Nodes.Count.ToString(),
            Pos = new Vector2(),
            IsActive = true,
        };
        graphService.CurrentGraphModel.Nodes.Add(activenode);
        StateHasChanged();
        await graphService.Rerender();
    }
    /// <summary>
    /// Fügt dem Graph eine Kante hinzu
    /// </summary>
    private async void AddEdge()
    {
        Edge newEdge = new Edge
        {
            Id = graphService.CurrentGraphModel.Edges.Count.ToString(),
            StartNode = null,
            EndNode = null,
            Weight = 0,
        };
        graphService.CurrentGraphModel.Edges.Add(newEdge);
        await graphService.Rerender();
    }
    /// <summary>
    /// Wird aufgerufen, wenn das Ende einer Kante geändert wurde
    /// </summary>
    /// <param name="edge">Bearbeitete Kante</param>
    /// <param name="args">Argumente</param>
    private async void ChangedEndEdge(Edge edge, ChangeEventArgs args)
    {
        try
        {
            edge.EndNode = graphService.CurrentGraphModel.Nodes.First(x => x.Id == args.Value.ToString());
            if (!edge.StartNode.Edges.Contains(edge))
            {
                edge.StartNode.Edges.Add(edge);
            }
        }
        catch
        {
            edge.EndNode = null;
        }
        StateHasChanged();
        await graphService.Rerender(edge);
    }
    /// <summary>
    /// Wird aufgerufen, wenn der Start einer Kante geändert wurde
    /// </summary>
    /// <param name="edge">Bearbeitete Kante</param>
    /// <param name="args">Argumente</param>
    private async void ChangedStartEdge(Edge edge, ChangeEventArgs args)
    {
        try
        {
            edge.StartNode = graphService.CurrentGraphModel.Nodes.First(x => x.Id == args.Value.ToString());
            if (!edge.StartNode.Edges.Contains(edge))
            {
                edge.StartNode.Edges.Add(edge);
            }
        }
        catch
        {
            edge.StartNode = null;
        }
        StateHasChanged();
        await graphService.Rerender(edge);
    }

    private Modal ModalDirectional;
    /// <summary>
    /// Umwandlung in einen ungerichteten Graphen
    /// Dabei gehen alle Kanten verloren, welche bidirektional sind
    /// </summary>
    private async void RemoveBidirectional()
    {
        var removelist = graphService.CurrentGraphModel.Edges.SelectMany(x => graphService.CurrentGraphModel.Edges.Where(y => y.StartNode == x.EndNode && y.EndNode == x.StartNode)).ToList();
        foreach (var edge in removelist)
        {
            edge.StartNode.Edges.Remove(edge);
            edge.EndNode.Edges.Remove(edge);
            graphService.CurrentGraphModel.Edges.Remove(edge);
        }
        graphService.CurrentGraphModel.IsDirected = !graphService.CurrentGraphModel.IsDirected;
        ModalDirectional.Show();
        await graphService.Rerender<BasicGraph>();
    }
    private Modal ModalSave;
    /// <summary>
    /// Prüft ob der Graph- Name bereits existiert und speichert den Graph.
    /// </summary>
    private async void CheckExistsandOpenSaveGraphModal()
    {
        if ((await graphService.GetGraphFilenames()).Contains(graphService.CurrentGraphModel.Name))
        {
            ModalSave.Show();
        }
        else
        {
            SaveGraph();
        }
    }
}
