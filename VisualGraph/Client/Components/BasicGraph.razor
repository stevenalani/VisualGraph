@inherits GraphInternalUI

@if (graphService.CurrentGraphModel != null && SvgDisplay != null)
{

    var activenode = graphService.CurrentGraphModel.ActiveNode;
    <svg id="@(graphService.CurrentGraphModel.Name)" class="vssvg img-fluid" viewBox="@(SvgDisplay.ViewBox)"
         @onclick="@OnSvgClick" @onclick:stopPropagation="true"
         @onmousemove="@OnSvgMouseMove" @onmousemove:stopPropagation="false"
         @onmouseup="@OnSvgMouseUp" @onmouseup:stopPropagation="true"
         @onmousedown="@OnSvgMouseDown" @onmousedown:stopPropagation="true"
         @onkeydown="@OnSvgKeyDown" @onkeydown:stopPropagation="true"
         @ontouchmove="@OnSvgTouchMove" @ontouchmove:stopPropagation="true">
        <defs>
            <marker id="arrow" viewBox="0 0 10 10" refX="8" refY="5"
                    markerWidth="6" markerHeight="6"
                    orient="auto-start-reverse">
                <path d="M 0 0 L 9 5 L 0 10 z"
                      fill="@graphService.GraphStyleParameters.EdgeStrokeColor"
                      stroke="@graphService.GraphStyleParameters.EdgeStrokeColor"
                      stroke-width="@graphService.GraphStyleParameters.EdgeWidthText" />
            </marker>
            <marker id="arrowactive" viewBox="0 0 10 10" refX="8" refY="5"
                    markerWidth="6" markerHeight="6"
                    orient="auto-start-reverse">
                <path d="M 0 0 L 9 5 L 0 10 z"
                      fill="@graphService.GraphStyleParameters.EdgeActiveStrokeColor"
                      stroke="@graphService.GraphStyleParameters.EdgeActiveStrokeColor"
                      stroke-width="@graphService.GraphStyleParameters.EdgeWidthText" />
            </marker>
            <marker id="arrowroute" viewBox="0 0 10 10" refX="8" refY="5"
                    markerWidth="6" markerHeight="6"
                    orient="auto-start-reverse">
                <path d="M 0 0 L 9 5 L 0 10 z"
                      fill="@graphService.GraphStyleParameters.EdgeRouteColor"
                      stroke="@graphService.GraphStyleParameters.EdgeRouteColor"
                      stroke-width="@graphService.GraphStyleParameters.EdgeRouteWidthText" />
            </marker>
            <marker id="axisarrow" refX="20" refY="10"
                    markerWidth="20" markerHeight="20"
                    orient="auto-start-reverse">
                <path d="M 0 0 L 20 10 L 0 20"
                      stroke="@CoordinateAxis.CoordinateSystemColor"
                      fill="none" />
            </marker>
            <marker id="markerLineX" viewBox="0 0 7 7" markerWidth="7" markerHeight="10" refX="3.5" refY="3.5" orient="auto">
                <line x1="3.5" y1="0" x2="3.5" y2="7" stroke="@CoordinateAxis.CoordinateSystemColor"></line>
            </marker>
        </defs>
        <AxisComponent @ref="@CoordinateSystemComponent"/>
        <!--CoordinateAxis.GenerateForGraphRange(graphService.CurrentGraphModel.ConvexHull[0].X, graphService.CurrentGraphModel.ConvexHull[0].Y, graphService.CurrentGraphModel.ConvexHull[1].X, graphService.CurrentGraphModel.ConvexHull[1].Y)-->
        @if (activenode != null)
        {
            <line x1="@activenode.PosXText" y1="@activenode.PosYText" x2="0" y2="@activenode.PosYText" stroke="rgba(0,0,0,0.5)" stroke-width="0.1"></line>
            <line x1="@activenode.PosXText" y1="@activenode.PosYText" x2="@activenode.PosXText" y2="0" stroke="rgba(0,0,0,0.5)" stroke-width="0.1"></line>
        }
        @foreach (var edge in graphService.CurrentGraphModel.Edges)
        {
            if (edge.StartNode != null && edge.EndNode != null)
            {


                var reverseEdge = graphService.CurrentGraphModel.Edges.FirstOrDefault(x => x.StartNode == edge.EndNode && x.EndNode == edge.StartNode);
                if (graphService.CurrentGraphModel.IsDirected)
                {

                    if (reverseEdge == null)
                    {
                        @RenderFragmentEdge(edge, false, true);
                    }
                    else
                    {
                        @RenderFragmentEdge(edge, true, true);
                    }
                }
                else
                {

                    if (reverseEdge == null)
                    {
                        @RenderFragmentEdge(edge, false, false);
                    }
                }


            }
        }
        @foreach (var node in graphService.CurrentGraphModel.Nodes)
        {
            @RenderFragmentNode(node)
        }
    </svg>
    <div id="legend">
        <span class="legend-row"><a class="startnode legend-node"></a> Startknoten</span><br />
        <span class="legend-row"><a class="endnode legend-node"></a> Endknoten</span><br />
        <span class="legend-row"><a class="active legend-node"></a> Aktiver Knoten</span><br />
        <span class="legend-row"><a class="legend-edge"></a> Kante</span><br />
        <span class="legend-row"><a class="active legend-edge"></a> aktive Kante</span><br />
        <span class="legend-row"><a class="pathedge legend-edge"></a> Kante auf Route</span>
    </div>
    <EdgeContextMenu @ref="edgeContextMenu" />
    <NodeContextMenu @ref="nodeContextMenu" />
    <GraphContextMenu @ref="graphContextMenu" />
}
else
{
    <p>Kein Graph gewählt</p>
}



@code {
        GraphContextMenu graphContextMenu;
        EdgeContextMenu edgeContextMenu;
        NodeContextMenu nodeContextMenu;
    public SvgDisplay SvgDisplay;
    public List<EdgeComponent> EdgeComponents { get; set; } = new List<EdgeComponent>();
    public List<NodeComponent> NodeComponents { get; set; } = new List<NodeComponent>();
    public AxisComponent CoordinateSystemComponent { get; set; }
    private DotNetObjectReference<BasicGraph> dotnetreference;


    [JSInvokable("UpdateDisplay")]
    public Task<bool> UpdateDisplay(SvgPanZoomInformation svgInformation)
    {
        return SvgDisplay.UpdateDisplaySettings(svgInformation);
    }

    private string oldGraphName = string.Empty;


    protected override void OnInitialized()
    {
        SvgDisplay = new SvgDisplay(
            graphService.CurrentGraphModel.ConvexHull[0].X - 10,
            graphService.CurrentGraphModel.ConvexHull[0].Y - 10,
            graphService.CurrentGraphModel.ConvexHull[1].X + 10,
            graphService.CurrentGraphModel.ConvexHull[1].Y + 10);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        await base.OnAfterRenderAsync(firstrender);

        if (firstrender)
        {
            dotnetreference = DotNetObjectReference.Create(this);
            await graphService.InitZoomPan(dotnetreference);
        }
        if (graphService.CurrentGraphModel != null && oldGraphName != graphService.CurrentGraphModel.Name)
        {
            oldGraphName = graphService.CurrentGraphModel.Name;

            await graphService.Crop();
            StateHasChanged();
            return;
        }
    }
    RenderFragment RenderFragmentNode(Node node) => builder =>
    {
        builder.OpenComponent(0,typeof(NodeComponent));
        builder.AddAttribute(1, "Node", node);
        builder.AddAttribute(2, "onclick", new EventCallbackFactory().Create<MouseEventArgs>(this, args => OnNodeClick(args, node)));
        builder.AddAttribute(3, "onmousedown", new EventCallbackFactory().Create<MouseEventArgs>(this, args => OnNodeMouseDown(args, node)));
        builder.AddAttribute(4, "onmouseup", new EventCallbackFactory().Create<MouseEventArgs>(this, args => OnNodeMouseUp(args, node)));
        builder.AddAttribute(5, "ontouchstart", new EventCallbackFactory().Create<TouchEventArgs>(this, args => OnNodeTouchStart(args, node)));
        builder.AddAttribute(6, "ontouchenter", new EventCallbackFactory().Create<TouchEventArgs>(this, args => OnNodeTouchEnter(args, node)));
        builder.AddAttribute(7, "ontouchend", new EventCallbackFactory().Create<TouchEventArgs>(this, args => OnNodeTouchEnd(args, node)));
        builder.AddComponentReferenceCapture(8,
            inst =>
            {
                NodeComponents.Add((NodeComponent)inst);
            }
        );

        builder.CloseComponent();
    };

    RenderFragment RenderFragmentEdge(Edge edge, bool hasReversedEdge, bool isDirected) =>
        builder =>
        {
            builder.OpenComponent(0,typeof(EdgeComponent));
            builder.AddAttribute(1, "Edge", edge);
            builder.AddAttribute(2, "IsDirected", isDirected);
            builder.AddAttribute(3, "onclick", new EventCallbackFactory().Create<MouseEventArgs>(this, args => OnEdgeClick(args, edge)));
            builder.AddAttribute(4, "onmousedown", new EventCallbackFactory().Create<MouseEventArgs>(this, args => OnEdgeMouseDown(args, edge)));
            builder.AddAttribute(5, "onmouseup", new EventCallbackFactory().Create<MouseEventArgs>(this, args => OnEdgeMouseUp(args, edge)));
            builder.AddAttribute(6, "ontouchstart", new EventCallbackFactory().Create<TouchEventArgs>(this, args => OnEdgeTouchStart(args, edge)));
            builder.AddAttribute(7, "ontouchenter", new EventCallbackFactory().Create<TouchEventArgs>(this, args => OnEdgeTouchEnter(args, edge)));
            builder.AddAttribute(8, "ontouchend", new EventCallbackFactory().Create<TouchEventArgs>(this, args => OnEdgeTouchEnd(args, edge)));

            builder.AddComponentReferenceCapture(8,
                inst =>
                {
                    EdgeComponents.Add((EdgeComponent)inst);
                }
            );

            builder.CloseComponent();
        };


    public async void DisablePan()
    {
        await graphService.DisablePan();
    }
    public async void EnablePan()
    {
        await graphService.EnablePan();
    }

    #region EventHandling
    public bool NodeDragStarted = false;
    public bool EdgeDragStarted = false;

    public event EventHandler<MouseEventArgs>
        SvgClick;
    public event EventHandler<MouseEventArgs>
        SvgMouseDown;
    public event EventHandler<MouseEventArgs>
        SvgMouseUp;
    public event EventHandler<MouseEventArgs>
        SvgMouseMove;
    public event EventHandler<WheelEventArgs>
        SvgMouseWheel;
    public event EventHandler<KeyboardEventArgs>
        SvgKeyDown;

    public event EventHandler<TouchEventArgs>
        SvgTouchMove;

    public event EventHandler<GraphMouseEventArgs<Node>> NodeClick;
    public event EventHandler<GraphMouseEventArgs<Node>> NodeMouseDown;
    public event EventHandler<GraphMouseEventArgs<Node>> NodeMouseUp;
    public event EventHandler<GraphMouseEventArgs<Node>> NodeMouseMove;

    public event EventHandler<GraphTouchEventArgs<Node>> NodeTouchStart;
    public event EventHandler<GraphTouchEventArgs<Node>> NodeTouchEnd;
    public event EventHandler<GraphTouchEventArgs<Node>> NodeTouchEnter;

    public event EventHandler<WheelEventArgs> NodeMouseWheel;

    public event EventHandler<GraphMouseEventArgs<Edge>> EdgeClick;
    public event EventHandler<GraphMouseEventArgs<Edge>> EdgeMouseDown;
    public event EventHandler<GraphMouseEventArgs<Edge>> EdgeMouseUp;
    public event EventHandler<GraphMouseEventArgs<Edge>> EdgeMouseMove;
    public event EventHandler<GraphTouchEventArgs<Edge>> EdgeTouchStart;
    public event EventHandler<GraphTouchEventArgs<Edge>> EdgeTouchEnd;
    public event EventHandler<GraphTouchEventArgs<Edge>> EdgeTouchEnter;

    protected virtual void OnSvgClick(MouseEventArgs e)
    {

        var handler = SvgClick;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual void OnSvgMouseDown(MouseEventArgs e)
    {
        var handler = SvgMouseDown;
        if (handler != null)
        {
            handler(this, e);

        }
    }
    protected virtual void OnSvgMouseUp(MouseEventArgs e)
    {
        var handler = SvgMouseUp;
        if (handler != null)
        {
            handler(this, e);

        }
    }
    protected virtual void OnSvgMouseMove(MouseEventArgs e)
    {
        var handler = SvgMouseMove;
        if (handler != null)
        {
            handler(this, e);

        }
    }
    protected virtual void OnSvgMouseWheel(WheelEventArgs e)
    {
        var handler = SvgMouseWheel;
        if (handler != null)
        {
            handler(this, e);

        }
    }
    protected virtual void OnSvgKeyDown(KeyboardEventArgs e)
    {
        var handler = SvgKeyDown;
        if (handler != null)
        {
            handler(this, e);
        }
    }

    protected virtual void OnSvgTouchMove(TouchEventArgs e)
    {

        var handler = SvgTouchMove;
        if (handler != null)
        {
            handler(this, e);
        }
    }


    protected virtual void OnNodeClick(MouseEventArgs e, Node node)
    {
        var handler = NodeClick;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Node>(node, e));
        }
    }
    protected virtual void OnNodeTouchStart(TouchEventArgs e, Node node)
    {
        var handler = NodeTouchStart;
        if (handler != null)
        {
            handler(this, new GraphTouchEventArgs<Node>(node, e));

        }
    }
    protected virtual void OnNodeTouchEnd(TouchEventArgs e, Node node)
    {
        var handler = NodeTouchEnd;
        if (handler != null)
        {
            handler(this, new GraphTouchEventArgs<Node>(node, e));

        }
    }
    protected virtual void OnNodeTouchEnter(TouchEventArgs e, Node node)
    {
        var handler = NodeTouchEnter;
        if (handler != null)
        {
            handler(this, new GraphTouchEventArgs<Node>(node, e));

        }
    }
    protected virtual void OnNodeMouseDown(MouseEventArgs e, Node node)
    {
        var handler = NodeMouseDown;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Node>(node, e));

        }
    }
    protected virtual void OnNodeMouseUp(MouseEventArgs e, Node node)
    {
        var handler = NodeMouseUp;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Node>(node, e));

        }
    }
    protected virtual void OnNodeMouseMove(MouseEventArgs e, Node node)
    {
        var handler = NodeMouseMove;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Node>(node, e));

        }
    }
    protected virtual void OnNodeMouseWheel(WheelEventArgs e)
    {
        var handler = NodeMouseWheel;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual void OnEdgeClick(MouseEventArgs e, Edge edge)
    {
        var handler = EdgeClick;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Edge>(edge, e));
        }
    }
    protected virtual void OnEdgeMouseDown(MouseEventArgs e, Edge edge)
    {
        var handler = EdgeMouseDown;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Edge>(edge, e));
        }
    }
    protected virtual void OnEdgeMouseUp(MouseEventArgs e, Edge edge)
    {
        var handler = EdgeMouseUp;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Edge>(edge, e));
        }
    }
    protected virtual void OnEdgeTouchStart(TouchEventArgs e, Edge node)
    {
        EventHandler<GraphTouchEventArgs<Edge>> handler = EdgeTouchStart;
        if (handler != null)
        {
            handler(this, new GraphTouchEventArgs<Edge>(node, e));

        }
    }
    protected virtual void OnEdgeTouchEnd(TouchEventArgs e, Edge node)
    {
        EventHandler<GraphTouchEventArgs<Edge>> handler = EdgeTouchEnd;
        if (handler != null)
        {
            handler(this, new GraphTouchEventArgs<Edge>(node, e));

        }
    }
    protected virtual void OnEdgeTouchEnter(TouchEventArgs e, Edge node)
    {
        EventHandler<GraphTouchEventArgs<Edge>> handler = EdgeTouchEnter;
        if (handler != null)
        {
            handler(this, new GraphTouchEventArgs<Edge>(node, e));

        }
    }
    protected virtual void OnEdgeMouseMove(MouseEventArgs e, Edge edge)
    {
        EventHandler<GraphMouseEventArgs<Edge>> handler = EdgeMouseMove;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Edge>(edge, e));

        }
    }
    #endregion

    public async Task<Point2> RequestTransformedEventPosition(double x, double y)
    {
        return await graphService.GetTranslatedMousePos(x, y);
    }

    #region Defaut Callbacks

    public void RegisterDefaultCallbacks()
    {

        this.NodeMouseDown += DefaultCallbacks.ActivateDragNode;
        this.NodeTouchStart += DefaultCallbacks.ToggleActiveStateNode;
        this.NodeTouchStart += DefaultCallbacks.ActivateDragNode;
        this.NodeMouseUp += DefaultCallbacks.DeactivateDragNode;
        this.NodeTouchEnd += DefaultCallbacks.DeactivateDragNode;
        this.SvgMouseUp += DefaultCallbacks.DeactivateDragNode;
        this.NodeClick += DefaultCallbacks.ToggleActiveStateNode;
        this.EdgeClick += DefaultCallbacks.ToggleActiveStateEdge;
        RegisterContextMenus();

    }
    public void RegisterContextMenus()
    {
        this.EdgeMouseDown += async (sender, args) =>
        {

            if (args.MouseEventArgs.Button == 2)
            {
                await hideOtherContextMenus(edgeContextMenu);
                await edgeContextMenu.SetParametersAsync(ParameterView.FromDictionary(
                  new Dictionary<string, object>()
                    {
                        { "Edge", args.Target },
                        { "PosX", args.MouseEventArgs.ClientX },
                        { "PosY", args.MouseEventArgs.ClientY }
                    }
                  ));
                edgeContextMenu.Show();
            }
        };
        this.NodeMouseDown += async (sender, args) =>
        {
            if (args.MouseEventArgs.Button == 2)
            {
                await hideOtherContextMenus(nodeContextMenu);
                await nodeContextMenu.SetParametersAsync(ParameterView.FromDictionary(
                  new Dictionary<string, object>()
                    {
                        { "Node", args.Target },
                        { "PosX", args.MouseEventArgs.ClientX },
                        { "PosY", args.MouseEventArgs.ClientY }
                                }
                  ));
                nodeContextMenu.Show();
            }
        };
        this.SvgMouseDown += async (sender, args) =>
        {
            if (args.Button == 2)
            {
                await hideOtherContextMenus(graphContextMenu);
                await graphContextMenu.SetParametersAsync(ParameterView.FromDictionary(
                    new Dictionary<string, object>()
                    {
                        { "PosX", args.ClientX },
                        { "PosY", args.ClientY }
                    }));
                graphContextMenu.Show();
            }
        };
        this.SvgClick += async (sender, args) =>
        {
            await hideOtherContextMenus();
        };
    }
    #endregion
    private async Task hideOtherContextMenus(ContextMenu activatedMenu = null)
    {
        if (activatedMenu == null) {
            if (edgeContextMenu.IsVisible)
                edgeContextMenu.Show();
            if (nodeContextMenu.IsVisible)
                nodeContextMenu.Show();
            if (graphContextMenu.IsVisible)
                graphContextMenu.Show();
        }
        else if(activatedMenu is GraphContextMenu)
        {
            if (edgeContextMenu.IsVisible)
                edgeContextMenu.Show();
            if (nodeContextMenu.IsVisible)
                nodeContextMenu.Show();
        }
        else if (activatedMenu is NodeContextMenu) {
            if (edgeContextMenu.IsVisible)
                edgeContextMenu.Show();
            if (graphContextMenu.IsVisible)
                graphContextMenu.Show();
        }
        else if (activatedMenu is EdgeContextMenu) {
            if (nodeContextMenu.IsVisible)
                nodeContextMenu.Show();
            if (graphContextMenu.IsVisible)
                graphContextMenu.Show();
        }
        await graphService.Rerender();
    }
}

