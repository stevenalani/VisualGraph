@page "/"
@using System.Threading
@inject IGraphService graphService
@inject NavigationManager NavigationManager

    <div id="introslider" style="width:@(ContainerInformation.ParentWidth + "px");height:@(ContainerInformation.ParentHeight + "px")" class="carousel slide"  data-ride="carousel">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <div class="d-flex h-100 w-100" alt="First slide">
                    <h1 class="introslider-banner"><span class="bannerhighlight">V</span>isual<span class="bannerhighlight">G</span>raph</h1>                    
                </div>
            </div>
            <div class="carousel-item">
                <div class="d-flex h-100 w-100" alt="First slide">
                    <h1 class="introslider-title">Graphen erstellen</h1>
                    <p>
                        Eine Anwendung die den Anwender Graphen erstellen lässt.
                        <ul>
                            <li>Benutzer könnnen eigene Graphen tabellarisch erstellen.</li>
                            <li>Graphen können von Websites geladen werden.</li>
                            <li>Aus Skripten importiert werden.</li>
                            <li>Benutzer können Graphen unter im eigenen Verzeichnis speichern.</li>
                        </ul>
                    </p>
                </div>
            </div>
            <div class="carousel-item">
                <div class="d-flex h-100 w-100" alt="First slide">
                    <h1>Graphen bearbeiten</h1>
                    
                        <ul>
                            <li>Anwender können eigene so wie Standard- Graphen bearbeiten.</li>
                            <li>Benutzer könnnen Graphen tabellarisch bearbeiten.</li>
                            <li>Benutzer könnnen Knoten und Kanten im Rechtsklick- Kontextmenü bearbeiten.</li>
                            <li>Knoten können per Drag and Drop Positioniert werden</li>
                            <li>Aus Skripten importiert werden</li>
                        </ul>
                </div>
            </div>
            <div @ref="testref" class="carousel-item">
                <div class="d-flex h-100 w-100" alt="First slide">
                    <h1>Graphen bearbeiten</h1>

                    <ul>
                        <li>Anwender können eigene so wie Standard- Graphen bearbeiten.</li>
                        <li>Benutzer könnnen Graphen tabellarisch bearbeiten.</li>
                        <li>Benutzer könnnen Knoten und Kanten im Rechtsklick- Kontextmenü bearbeiten.</li>
                        <li>Knoten können per Drag and Drop Positioniert werden</li>
                        <li>Aus Skripten importiert werden</li>
                    </ul>

                </div>
            </div>

            <a class="carousel-control-prev" href="#introslider" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#introslider" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
    </div>
        @graphService.GetRenderFragment(withDefaultCallbacks: false).Result


        @code {
            object testref;
            string Graphname = "IndexGraph";
            BasicGraphModel GraphModel;
            BasicGraph GraphComponent;
            static Random random = new Random();
            bool isAnimated = false;
            System.Timers.Timer Animation;
            Dictionary<Node, Vector2> directions = new Dictionary<Node, Vector2>();
            SvgContainerInformation ContainerInformation = new SvgContainerInformation() { ParentHeight = 300, ParentWidth = 400 };
            Vector2 Magnet = new Vector2(15, -1);

            protected override async Task OnInitializedAsync()
            {

                if (graphService.CurrentGraphModel.Name != Graphname)
                {
                    GraphModel = GraphFactory.CreateRandomGraph(Graphname, 50, 60);
                    await graphService.UseGraphModel(GraphModel, withDefaultCallbacks: false);
                }
            }

            protected override async Task OnAfterRenderAsync(bool firstRender)
            {
                if (firstRender)
                {
                    NavigationManager.LocationChanged += endAnimation;
                    GraphModel = graphService.CurrentGraphModel;
                    Animation = new System.Timers.Timer();
                    Animation.Interval = 24;
                    Animation.Elapsed += async (sender, arg) =>
                    {

                        try
                        {
                            GraphModel.Nodes.ForEach(x =>
                            {
                                if (!directions.ContainsKey(x))
                                {
                                    directions.Add(x, Vector2.Normalize(Magnet += x.Neighbours(false).Last().Pos - x.Pos));
                                }
                                if (x.Pos.Length() > 75)
                                {
                                    directions[x] = Vector2.Normalize(Vector2.Reflect(directions[x], Vector2.Normalize(new Vector2() - x.Pos)));
                                }
                                x.Pos += directions[x] * (x.Pos.Length() / 75) / 5;

                            });
                            await graphService.CurrentGraph?.ChangedState();
                        }
                        catch { };

                    };
                    Animation.AutoReset = true;
                    isAnimated = true;
                    ContainerInformation = await graphService.GetSvgContainerInformation();
                    StateHasChanged();
                    Animation.Start();
                }
            }

            private void endAnimation(object sender, LocationChangedEventArgs args)
            {
                if (!args.Location.EndsWith("/"))
                {
                    Animation.Stop();
                    NavigationManager.LocationChanged -= endAnimation;
                }
            }

        }
