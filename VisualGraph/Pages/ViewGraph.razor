@page "/graphview"
@using System.IO
@using Microsoft.Msagl.Core.Layout;
@using Microsoft.Msagl.Miscellaneous;
@using Microsoft.Msagl.Routing;
@using Microsoft.Msagl.Core.Geometry.Curves;
@inject IGraphService graphService
@inject IToastService toastService
<div class="flex-wrapper">
    <div class="flex-wrapper-title">
            
            
        <EditForm class="form-inline" Model="@model" OnSubmit="@HandleSelectChange">
            <h3 class="pr-2">Graphen betrachten</h3>
            <div class="form-group">
                <InputSelect name="graphselect" id="graphselect" class="form-control" @bind-Value="@model.CurrentGraph">
                    <option selected="selected" value="">Bitte Graph wählen</option>
                    @foreach (var name in graphFilenames)
                    {
                        <option value="@name">@name</option>
                    }
                </InputSelect>
                <button type="submit" class="btn btn-outline-primary"><span class="oi oi-data-transfer-upload"></span> Graph laden</button>
            </div>
        </EditForm>

    </div>
    <div class="left-container">
        @RenderGraph()
    </div>
</div>

@code {
    public class SelectGraphModel
    {
        public string CurrentGraph { get; set; }
        public VisualGraph.Data.Additional.Models.BasicGraphModel Graph { get; set; }
    }
    BasicGraph basicGraph;
    RenderFragment RenderGraph()
    {
        return new RenderFragment(builder =>
        {
            if (model.Graph != null)
            {
                builder.OpenComponent<BasicGraph>(0);
                builder.AddAttribute(1, "GraphModel", model.Graph);
                builder.AddComponentReferenceCapture(2,
                    inst =>
                    {
                        var basicGraph1 = (BasicGraph)inst;
                        basicGraph = basicGraph1;
                        basicGraph.SvgClick += (sender, args) =>
                        {
                            BasicGraph graph = ((BasicGraph)sender);
                            if (graph.GraphModel.ActiveNode != null)
                            {
                                string identifierB = graph.GraphModel.ActiveNode.Name == "" ? graph.GraphModel.ActiveNode.Id.ToString() : graph.GraphModel.ActiveNode.Name;
                                toastService.ShowSuccess($"Deselected node: { identifierB }", "Active node changed");
                                graph.GraphModel.ActiveNode.IsActive = false;
                                basicGraph.NodeDragStarted = false;
                            }
                        };
                        basicGraph.NodeClick += (sender, args) =>
                        {
                            BasicGraph graph = ((BasicGraph)sender);
                            Data.Additional.Models.Node node = args.Target;
                            string identifierA = node.Name == "" ? node.Id.ToString() : node.Name;
                            if (graph.GraphModel.ActiveNode != null)
                            {
                                string identifierB = graph.GraphModel.ActiveNode.Name == "" ? graph.GraphModel.ActiveNode.Id.ToString() : graph.GraphModel.ActiveNode.Name;
                                if (graph.GraphModel.ActiveNode.Id == node.Id)
                                {
                                    node.IsActive = false;
                                    basicGraph.NodeDragStarted = false;
                                    toastService.ShowSuccess($"Deselected node: { identifierB }", "Active node changed");
                                }
                                else
                                {
                                    graph.GraphModel.ActiveNode.IsActive = false;
                                    node.IsActive = true;
                                    toastService.ShowSuccess($"Old active node: { identifierB } New active node: { identifierA }", "Active node changed");
                                }
                            }
                            else
                            {
                                node.IsActive = true;
                                toastService.ShowSuccess($"Active node selected: { identifierA }", "Active node changed");
                            }
                            StateHasChanged();
                        };

                        basicGraph.NodeMouseDown += async (sender, args) =>
                        {
                            if (model.Graph.ActiveNode != null)
                            {
                                basicGraph.NodeDragStarted = true;
                                await graphService.DisablePan();
                            }
                        };

                        basicGraph.NodeTouchStart += async (sender, args) =>
                        {
                            VisualGraph.Data.Additional.Models.Node node = args.Target;
                            if (model.Graph.ActiveNode != null)
                            {
                                if (model.Graph.ActiveNode.Id == node.Id)
                                {
                                    node.IsActive = false;
                                }
                                else
                                {
                                    model.Graph.ActiveNode.IsActive = false;
                                    node.IsActive = true;
                                }
                            }
                            else
                            {
                                node.IsActive = true;
                            }
                            basicGraph.NodeDragStarted = true;
                            await graphService.DisablePan();
                        };
                        basicGraph.NodeMouseUp += async (sender, args) =>
                        {
                            basicGraph.NodeDragStarted = false;
                            await graphService.EnablePan();
                        };
                        basicGraph.NodeTouchEnd += async (sender, args) =>
                        {
                            basicGraph.NodeDragStarted = false;
                            await graphService.EnablePan();
                        };
                        basicGraph.SvgMouseMove += async (sender, args) =>
                        {
                            if (model.Graph.ActiveNode != null && basicGraph.NodeDragStarted)
                            {
                                try
                                {
                                    Point2 coords = await graphService.GetTranslatedMousePos(model.Graph.Name, args.ClientX, args.ClientY);
                                    model.Graph.ActiveNode.Pos.X = Convert.ToSingle(coords.X);
                                    model.Graph.ActiveNode.Pos.Y = Convert.ToSingle(coords.Y);
                                }
                                catch { }
                            }
                        };
                        basicGraph.SvgTouchMove += async (sender, args) =>
                        {
                            if (model.Graph.ActiveNode != null && basicGraph.NodeDragStarted)
                            {
                                try
                                {
                                    Point2 coords = await graphService.GetTranslatedMousePos(model.Graph.Name, args.Touches.First().ClientX, args.Touches.First().ClientY);
                                    model.Graph.ActiveNode.Pos.X = Convert.ToSingle(coords.X);
                                    model.Graph.ActiveNode.Pos.Y = Convert.ToSingle(coords.Y);
                                }
                                catch { }
                            }
                        };
                        basicGraph.SvgMouseUp += (sender, args) =>
                        {
                            Refresh();
                        };
                    });
                builder.CloseComponent();
            }
        });
    }
    SelectGraphModel model = new SelectGraphModel();
    public string[] graphFilenames { get; set; }
    private string[] graphPathes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var graphFilePathes = graphPathes = await graphService.GetGraphFilenames();
        graphFilenames = graphFilePathes.Select(x => new FileInfo(x).Name).OrderBy(x => Path.GetFileNameWithoutExtension(x)).ToArray();
        if (graphFilenames.Length > 0)
            model.CurrentGraph = graphFilenames[0];
        base.OnInitialized();
    }
    public async void HandleSelectChange()
    {
        var graphmodel = await graphService.GetGraph(model.CurrentGraph);
        model.Graph = graphmodel;
        StateHasChanged();

    }
    private async Task LayoutGraph()
    {
        var resultGraph = await graphService.LayoutGraph(model.Graph);
        model.Graph = resultGraph;
        StateHasChanged();
    }
    private async Task Crop()
    {
        await graphService.Fit();
        await graphService.Center();
    }

    public void Refresh()
    {
        StateHasChanged();
        basicGraph.ChangedState();
    }
    public void Refresh(BasicGraphModel graph)
    {
        this.model.Graph = graph;
        StateHasChanged();
        basicGraph.ChangedState();
    }

}