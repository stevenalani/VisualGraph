@page "/algorithm/dijkstra"
@using System.IO
@using VisualGraph.Data
@using Blazored.Toast;
@using Node = VisualGraph.Data.Additional.Models.Node
@inherits AlgorithmPage
@inject IGraphService GraphService
@inject IJSRuntime JsRuntime
@inject IToastService toastService

    <Modal @ref="ModalLayoutPrarmeters">
        <AutoLayoutForm OnSubmit="async () => { ModalLayoutPrarmeters.Show();await GraphService.Rerender(); }" />
    </Modal>

<div class="flex-wrapper">
    <div class="flex-wrapper-title">
        <h3>Dijkstra Algorithmus</h3>
        @if (GraphService.CurrentGraphModel != null)
        {
            <form class="form-inline">
                <div class="form-group">
                    <button class="btn btn-secondary" type="button" @onclick="@Crop">Graph zuschneiden und zentrieren</button>
                    <button class="btn btn-secondary" type="button" @onclick="@LayoutGraph">Graph layouten</button>
                </div>
                <div class="form-group ml-1">
                    <button class="btn btn-secondary" type="button" @onclick="@(() => RunDikstra())">Dikstra Einzelschritt</button>
                    <button class="btn btn-secondary" type="button" @onclick="@(() => RunDikstra(true))">Dikstra ausführen</button>
                </div>
                <div class="form-group ml-1">
                    <button type="button" @onclick="@DijkstraCheapestRoute" class="btn btn-secondary">Günstigste Route ermitteln</button>
                </div>
            </form>
        }
    </div>
    <hr />
    <div class="left-container">
        @GraphService.GetRenderFragment().Result
    </div>
    <div class="right-container">
        @if (DijkstraAlgorithmRunner?.Results != null)
        {
            <div class="card pb-5">
                <div class="card-body">
                    <DijkstraResultTable Results="@DijkstraAlgorithmRunner.Results" />
                    <div>
                        @if (ShortestRouteToEndnode != null)
                        {
                            if (ShortestRouteToEndnode.Count == 1)
                            {
                                <h5>Die günstigste/kürzeste Route von @(DijkstraAlgorithmRunner.StartNode.Name ?? DijkstraAlgorithmRunner.StartNode.Id.ToString()) nach @(DijkstraAlgorithmRunner.EndNode.Name ?? DijkstraAlgorithmRunner.EndNode.Id.ToString()) konnte nicht ermittelt werden </h5>
                            }
                            else
                            {
                                <h5>Die günstigste/kürzeste Route von @(DijkstraAlgorithmRunner.StartNode.Name ?? DijkstraAlgorithmRunner.StartNode.Id.ToString()) nach @(DijkstraAlgorithmRunner.EndNode.Name ?? DijkstraAlgorithmRunner.EndNode.Id.ToString()) </h5>
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Reihenfolge</th>
                                            @for (int i = 0; i < ShortestRouteToEndnode.Count; i++)
                                            {
                                                <th>@(i + 1)</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <th>ID</th>
                                            @foreach (var node in ShortestRouteToEndnode)
                                            {
                                                <td>@node.Item1.Id</td>
                                            }
                                        </tr>
                                        <tr>
                                            <th>Name</th>
                                            @foreach (var node in ShortestRouteToEndnode)
                                            {
                                                <td>@node.Item1.Name</td>
                                            }
                                        </tr>
                                        <tr>
                                            <th>Kosten</th>
                                            @foreach (var node in ShortestRouteToEndnode)
                                            {
                                                <td>@node.Item2</td>
                                            }
                                        </tr>
                                        <tr>
                                            <th>Gesamtkosten:</th>
                                            <td>@PathCost.ToString(CultureInfo.CurrentCulture)</td>
                                        </tr>
                                    </tbody>
                                </table>
                            }
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@code {
    Modal ModalLayoutPrarmeters { get; set; }
    DijkstraAlgorithm DijkstraAlgorithmRunner;
    List<Tuple<Node, double>> ShortestRouteToEndnode;
    double PathCost = 0;
    string vgpathclass = " vgpath";
    private void LayoutGraph()
    {
        ModalLayoutPrarmeters.Show();
    }
    private async void Crop()
    {
        await GraphService.Fit();
        await GraphService.Center();
    }

    private void RunDikstra(bool autostep = false)
    {
        if (this.DijkstraAlgorithmRunner == null)
        {
            var startNodeId = GraphService.CurrentGraphModel.Nodes.FirstOrDefault(x => x.Classes.Contains(StartNodeClass))?.Id ?? -1;
            if (startNodeId != -1)
            {

                DijkstraAlgorithmRunner = new DijkstraAlgorithm(GraphService.CurrentGraphModel, startNodeId);
            }
            else
            {
                DijkstraAlgorithmRunner = new DijkstraAlgorithm(GraphService.CurrentGraphModel);
            }
        }
        if (DijkstraAlgorithmRunner.RemainingSteps > 0)
        {
            DijkstraAlgorithmRunner.Iterate(autostep);
        }
        else
        {
            DijkstraAlgorithmRunner = null;
            RunDikstra(autostep);
        }
    }

    private async void DijkstraCheapestRoute()
    {
        PathCost = 0;
        var startnodeId = GraphService.CurrentGraphModel.Nodes.FirstOrDefault(x => x.Classes.Contains("startnode"))?.Id ?? -1;
        var endnodeId = GraphService.CurrentGraphModel.Nodes.FirstOrDefault(x => x.Classes.Contains("endnode"))?.Id ?? -1;
        if (startnodeId == -1 || endnodeId == -1)
        {
            toastService.ShowError("Es muss ein Start- und Endknoten per Rechtsklick gewählt werden.");
            return;
        }
        if (ShortestRouteToEndnode != null)
            clearRouteClasses();
        DijkstraAlgorithmRunner = new DijkstraAlgorithm(GraphService.CurrentGraphModel, startnodeId);

        ShortestRouteToEndnode = DijkstraAlgorithmRunner.GetShortestRoute(startnodeId, endnodeId);
        visualizeRoute();
        await GraphService.Rerender();
        StateHasChanged();
    }

    private void visualizeRoute()
    {
        for (int nodeindex = 0; nodeindex < ShortestRouteToEndnode.Count; nodeindex++)
        {
            var node = ShortestRouteToEndnode[nodeindex].Item1;

            if (!node.Classes.Contains(vgpathclass))
                node.Classes.Add(vgpathclass);

            if (nodeindex < ShortestRouteToEndnode.Count - 1)
            {
                var node1 = ShortestRouteToEndnode[nodeindex + 1].Item1;
                if (!node1.Classes.Contains(vgpathclass))
                    node1.Classes.Add(vgpathclass);
                var edge = node.Edges.FirstOrDefault(x => (x.StartNode == node && x.EndNode == node1));
                if (edge != null)
                {
                    if (!edge.Classes.Contains(vgpathclass))
                        edge.Classes.Add(vgpathclass);
                    PathCost += edge.Weight;
                }
            }
        }
    }

    private void clearRouteClasses()
    {
        if (ShortestRouteToEndnode != null)
        {
            for (int nodeindex = 0; nodeindex < ShortestRouteToEndnode.Count; nodeindex++)
            {
                var node = ShortestRouteToEndnode[nodeindex].Item1;

                if (node.Classes.Contains(vgpathclass))
                    node.Classes.Remove(vgpathclass);

                if (nodeindex < ShortestRouteToEndnode.Count - 1)
                {
                    var node1 = ShortestRouteToEndnode[nodeindex + 1].Item1;
                    if (node1.Classes.Contains(vgpathclass))
                        node1.Classes.Remove(vgpathclass);
                    var edge = node.Edges.FirstOrDefault(x => (x.StartNode == node && x.EndNode == node1));
                    if (edge != null)
                    {
                        if (edge.Classes.Contains(vgpathclass))
                            edge.Classes.Remove(vgpathclass);
                    }
                }
            }
        }
    }
    private void resetDijkstra()
    {
        DijkstraAlgorithmRunner = null;
        ShortestRouteToEndnode = null;
    }

}