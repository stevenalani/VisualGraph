@page "/dijkstra"
@using System.IO
@using VisualGraph.Data
@using Node = VisualGraph.Data.Additional.Models.Node
@inject IGraphService GraphService
@inject IJSRuntime JsRuntime
<div class="flex-wrapper">
    <div class="flex-wrapper-title">
        <h3>Run Dijkstra Algorithm</h3>
        <EditForm class="form-inline" Model="@model" OnSubmit="@HandleSelectChange">
            <div class="form-group">
                <InputSelect name="graphselect" id="graphselect" class="form-control" @bind-Value="@model.CurrentGraphPath">
                    @foreach (var name in graphFilenames)
                    {
                        <option value="@name">@name</option>
                    }
                </InputSelect>
                <button type="submit">Laden</button>
            </div>
            @if (basicGraph != null)
            {
                <div class="form-group">
                    <button type="button" @onclick="@Crop">Crop View to Graph</button>
                    <button type="button" @onclick="@LayoutGraph">Run Layouting</button>
                </div>
                <div class="form-group ml-1">
                    <button type="button" @onclick="@DikstraStep">Singlestep Dikstra</button>
                    <button type="button" @onclick="@DikstraAutostep">Autorun Dikstra</button>
                </div>
                <div class="form-group ml-1">
                    <button type="button" @onclick="@DijkstraCheapestRoute" class="@(DijkstraAlgorithmRunner?.RemainingSteps < 1 ? "" : "hide")">Get the cheapest route</button>
                </div>
            }
        </EditForm>

    </div>
    <hr />
    <div class="left-container">
        @RenderGraph()
    </div>
    <div class="right-container">
        <div class="card pb-5">
            <div class="card-body">

                @if (DijkstraAlgorithmRunner?.Results != null)
                {
                    var headerEntries = DijkstraAlgorithmRunner?.Results[0];
                    <h5>Result Table</h5>
                    <h6>Startnode: ID=@(headerEntries.StartNode.Id); Name=@(headerEntries.StartNode.Name)</h6>
                    <table class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Iteration</th>
                                <th></th>
                                <th>ID: @headerEntries.StartNode.Id Name:@headerEntries.StartNode.Name</th>
                                @foreach (var resultEntries in headerEntries.Previous)
                                {
                                    <th><span>ID:@resultEntries.Key.Id</span><span> Name:@resultEntries.Key.Name</span></th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @{ int StepCount = 1; }
                            @foreach (var resultEntries in DijkstraAlgorithmRunner?.Results)
                            {

                                <tr>
                                    <td rowspan="2">@(StepCount++)</td>
                                    <td>Cost</td>
                                    <td>0</td>
                                    @foreach (var result in resultEntries.Previous)
                                    {

                                        if (resultEntries.Distances[result.Key] != double.PositiveInfinity)
                                        {
                                            <!--<td>String.Format("{0,0:0.00}", result.Value.Edges.First(x => x.StartNode == result.Key || x.EndNode == result.Key).Weight))</td>-->

                                            <td>@(String.Format("{0,0:0.00}", resultEntries.Distances[result.Key]))</td>
                                        }
                                        else
                                        {
                                            <td> &infin;</td>
                                        }
                                    }

                                </tr>
                                <tr>
                                    <td>Previous Node</td>
                                    <td>-</td>
                                    @foreach (var result in resultEntries.Previous)
                                    {
                                        if (result.Value != null)
                                        {
                                            <td>@result.Value.Name, @result.Value.Id</td>
                                        }
                                        else
                                        {
                                            <td>-</td>
                                        }
                                    }
                                </tr>
                            }

                        </tbody>
                    </table>
                    <div>
                        @if (ShortestRouteToEndnode != null)
                        {
                            <h5>The Shortest Route from @(DijkstraAlgorithmRunner.StartNode.Name ?? DijkstraAlgorithmRunner.StartNode.Id.ToString()) to @(DijkstraAlgorithmRunner.EndNode.Name ?? DijkstraAlgorithmRunner.EndNode.Id.ToString()) </h5>
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Node</th>
                                        @for (int i = 0; i < ShortestRouteToEndnode.Count; i++)
                                        {
                                            <th>@(i+1)</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <th>ID</th>
                                        @foreach (var node in ShortestRouteToEndnode)
                                        {
                                            <td>@node.Id</td>
                                        }
                                    </tr>
                                    <tr>
                                        <th>Name</th>
                                        @foreach (var node in ShortestRouteToEndnode)
                                        {
                                            <td>@node.Name</td>
                                        }
                                    </tr>
                                    <tr>
                                        <th>Total cost:</th>
                                        <td>@PathCost.ToString(CultureInfo.CurrentCulture)</td>
                                    </tr>
                                </tbody>
                            </table>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public class SelectGraphModel
    {
        public string CurrentGraphPath { get; set; }
        public VisualGraph.Data.Additional.Models.BasicGraphModel Graph { get; set; }
    }
    DijkstraAlgorithm DijkstraAlgorithmRunner;
    List<Node> ShortestRouteToEndnode;
    double PathCost = 0;

    SelectGraphModel model = new SelectGraphModel();
    public string[] graphFilenames { get; set; }
    private string[] graphPathes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var graphFilePathes = graphPathes = await GraphService.GetGraphFilenames();
        graphFilenames = graphFilePathes.Select(x => new FileInfo(x).Name).OrderBy(x => Path.GetFileNameWithoutExtension(x)).ToArray();
        model.CurrentGraphPath = graphFilenames[0];
        base.OnInitialized();
    }

    public async void HandleSelectChange()
    {
        var graphPath = graphPathes.First(x => x.Contains(model.CurrentGraphPath));
        var graphmodel = await GraphService.GetGraph(graphPath);
        model.Graph = graphmodel;
        DijkstraAlgorithmRunner = null;

        StateHasChanged();
    }
    private async Task LayoutGraph()
    {
        var resultGraph = GraphService.LayoutGraph(model.Graph);
    }
    private void Crop()
    {

        GraphService.Fit();
        GraphService.Center();
    }

    private async Task DikstraStep()
    {
        if (this.DijkstraAlgorithmRunner == null)
        {
            if (model.Graph.ActiveNode != null)
            {
                DijkstraAlgorithmRunner = new DijkstraAlgorithm(model.Graph, model.Graph.ActiveNode.Id);
            }
            else
            {
                DijkstraAlgorithmRunner = new DijkstraAlgorithm(model.Graph);
            }
        }
        DijkstraAlgorithmRunner.Iterate();
    }

    private async Task DikstraAutostep()
    {
        if (this.DijkstraAlgorithmRunner == null)
        {
            if (model.Graph.ActiveNode != null)
            {
                DijkstraAlgorithmRunner = new DijkstraAlgorithm(model.Graph, model.Graph.ActiveNode.Id);
            }
            else
            {
                DijkstraAlgorithmRunner = new DijkstraAlgorithm(model.Graph);
            }
        }
        DijkstraAlgorithmRunner.Iterate(auto: true);
    }

    private async Task DijkstraCheapestRoute()
    {
        PathCost = 0;
        string vgpathclass = " vgpath";
        var endnodeId = model.Graph.Nodes.FirstOrDefault(x => x.Classes.Contains("endnode")).Id;
        ShortestRouteToEndnode = DijkstraAlgorithmRunner.GetShortestRoute(model.Graph.ActiveNode.Id, endnodeId);
        for (int nodeindex = 0; nodeindex < ShortestRouteToEndnode.Count; nodeindex++)
        {
            var node = ShortestRouteToEndnode[nodeindex];

            if (!node.Classes.Contains(vgpathclass))
                node.Classes.Add(vgpathclass);

            if (nodeindex < ShortestRouteToEndnode.Count - 1)
            {
                var node1 = ShortestRouteToEndnode[nodeindex + 1];
                if (!node1.Classes.Contains(vgpathclass))
                    node1.Classes.Add(vgpathclass);
                var edge = node.Edges.FirstOrDefault(x => (x.EndNode == node1 && x.StartNode == node) || (x.EndNode == node && x.StartNode == node1));
                if (edge != null)
                {
                    if (!edge.Classes.Contains(vgpathclass))
                        edge.Classes.Add(vgpathclass);
                    PathCost += edge.Weight;
                }
            }
        }
        StateHasChanged();
    }
    BasicGraph basicGraph;
    RenderFragment RenderGraph()
    {
        return new RenderFragment(builder =>
        {
            if (model.Graph != null)
            {
                builder.OpenComponent<BasicGraph>(0);
                builder.AddAttribute(1, "GraphModel", model.Graph);
                builder.AddComponentReferenceCapture(2,
                    inst =>
                    {
                        string endnodeclass = "endnode";
                        var basicGraph1 = (BasicGraph)inst;
                        basicGraph = basicGraph1;
                        basicGraph.NodeMouseDown += async (sender, args) =>
                        {
                            if (args.MouseEventArgs.Buttons == 2)
                            {
                                var currentEndnode = model.Graph.Nodes.FirstOrDefault(x => x.Classes.Contains(endnodeclass) && x != args.Target);
                                currentEndnode?.Classes.Remove(endnodeclass);

                                if (args.Target.Classes.Contains(endnodeclass))
                                    args.Target.Classes.Remove(endnodeclass);
                                else
                                    args.Target.Classes.Add(endnodeclass);


                            }
                        };
                        basicGraph.SvgClick += async (sender, args) =>
                        {
                            BasicGraph graph = ((BasicGraph)sender);
                            if (graph.GraphModel.ActiveNode != null)
                            {
                                graph.GraphModel.ActiveNode.IsActive = false;
                            }
                        };
                        basicGraph.NodeClick += (sender, args) =>
                        {
                            BasicGraph graph = ((BasicGraph)sender);
                            Data.Additional.Models.Node node = args.Target;
                            if (graph.GraphModel.ActiveNode != null)
                            {
                                if (graph.GraphModel.ActiveNode.Id == node.Id)
                                {
                                    node.IsActive = false;
                                }
                                else
                                {
                                    graph.GraphModel.ActiveNode.IsActive = false;
                                    node.IsActive = true;
                                }
                            }
                            else
                            {
                                node.IsActive = true;
                            }
                            StateHasChanged();
                        };


                    });

                builder.CloseComponent();
            }
        });
    }

}