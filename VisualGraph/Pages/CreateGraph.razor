@page "/CreateGraph"
@using System.IO
@using Blazored.Toast.Configuration
@inject IGraphService GraphService
@implements IRefreshableParent

<div class="flex-wrapper">
    <BlazoredToasts Position="ToastPosition.TopLeft"
                    Timeout="2"
                    SuccessClass="success-toast-override"
                    SuccessIconClass="oi oi-thumbs-up"
                    ErrorIconClass="oi oi-bug"  />
    <div class="flex-wrapper-title">
        <h3>Graph erstellen und bearbeiten</h3>
        <hr />
    </div>

    <div class="left-container">
        @RenderGraph()
    </div>

</div>

@code {
    BasicGraph basicGraph;
    BasicGraphModel GraphModel { get; set; }


    protected override void OnInitialized()
    {
        GraphModel = new VisualGraph.Data.Additional.Models.BasicGraphModel()
        {
            Path = "unnamedGraph",

            Nodes = new List<Node>() {
                new Node { Pos = new Vector2(-10), IsActive = true, Id = 0, },
                new Node { Pos = new Vector2(10), Id = 1},
            }
        };
    }

    RenderFragment RenderGraph()
    {
        return new RenderFragment(builder =>
        {
            builder.OpenComponent<BasicGraph>(0);
            builder.AddAttribute(1, "GraphModel", GraphModel);
            builder.AddComponentReferenceCapture(2,
                inst =>
                {
                    var basicGraph1 = (BasicGraph)inst;
                    basicGraph = basicGraph1;
                });

            builder.CloseComponent();
        });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            basicGraph.RegisterDefaultCallbacks();
        }
    }

    public void Refresh()
    {
        StateHasChanged();
        basicGraph.ChangedState();
    }
    public void Refresh(BasicGraphModel graph)
    {
        this.GraphModel = graph;
        StateHasChanged();
        basicGraph.ChangedState();
    }
}

