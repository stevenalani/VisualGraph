@page "/CreateGraph"
@using System.IO
@using Blazored.Toast.Configuration
@inject IGraphService GraphService
@implements IRefreshableParent

<div class="flex-wrapper">
    <BlazoredToasts Position="ToastPosition.TopLeft"
                    Timeout="2"
                    SuccessClass="success-toast-override"
                    SuccessIconClass="oi oi-thumbs-up"
                    ErrorIconClass="oi oi-bug" />
    <div class="flex-wrapper-title">
        <h3>Edit or Create new Graph</h3>
        <hr />
    </div>

    <div class="left-container">
        @RenderGraph()

    </div>
    <div class="right-container">
        <GraphEditForm GraphModel="@GraphModel" Parent="@this" />
        <Skriptloader GraphModel="@GraphModel" Parent="this"/>
    </div>
</div>

@code {
    BasicGraph basicGraph;
    BasicGraphModel GraphModel { get; set; }


    protected override void OnInitialized()
    {
        GraphModel = new VisualGraph.Data.Additional.Models.BasicGraphModel()
        {
            Path = "unnamedGraph",

            Nodes = new List<Node>() {
                new Node { Pos = new Vector2(-10), IsActive = true, Id = 0, },
                new Node { Pos = new Vector2(10), Id = 1},
            }
        };
    }

    RenderFragment RenderGraph()
    {
        return new RenderFragment(builder =>
        {
            builder.OpenComponent<BasicGraph>(0);
            builder.AddAttribute(1, "GraphModel", GraphModel);
            builder.AddComponentReferenceCapture(2,
                inst =>
                {
                    var basicGraph1 = (BasicGraph)inst;
                    basicGraph = basicGraph1;
                });

            builder.CloseComponent();
        });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            basicGraph.SvgClick += (sender, args) =>
            {
                if (GraphModel.ActiveNode != null)
                {
                    GraphModel.ActiveNode.IsActive = false;
                    basicGraph.NodeDragStarted = false;
                }
            };
            basicGraph.NodeMouseDown += async (sender, args) =>
            {
                if (GraphModel.ActiveNode != null)
                {
                    basicGraph.NodeDragStarted = true;
                    await GraphService.DisablePan();
                }
            };
            basicGraph.NodeTouchStart += async (sender, args) =>
            {
                Node node = args.Target;
                if (GraphModel.ActiveNode != null)
                {
                    if (GraphModel.ActiveNode.Id == node.Id)
                    {
                        node.IsActive = false;
                    }
                    else
                    {
                        GraphModel.ActiveNode.IsActive = false;
                        node.IsActive = true;
                    }
                }
                else
                {
                    node.IsActive = true;
                }
                basicGraph.NodeDragStarted = true;
                await GraphService.DisablePan();
            };
            basicGraph.NodeMouseUp += async (sender, args) =>
            {
                basicGraph.NodeDragStarted = false;
                await GraphService.EnablePan();
            };
            basicGraph.NodeTouchEnd += async (sender, args) =>
            {
                basicGraph.NodeDragStarted = false;
                await GraphService.EnablePan();
            };
            basicGraph.SvgMouseMove += async (sender, args) =>
            {
                if (GraphModel.ActiveNode != null && basicGraph.NodeDragStarted)
                {
                    try
                    {
                        Point2 coords = await GraphService.GetTranslatedMousePos(GraphModel.Name, args.ClientX, args.ClientY);
                        GraphModel.ActiveNode.Pos.X = Convert.ToSingle(coords.X);
                        GraphModel.ActiveNode.Pos.Y = Convert.ToSingle(coords.Y);
                    }
                    catch { }
                }
            };
            basicGraph.SvgTouchMove += async (sender, args) =>
            {
                if (GraphModel.ActiveNode != null && basicGraph.NodeDragStarted)
                {
                    try
                    {
                        Point2 coords = await GraphService.GetTranslatedMousePos(GraphModel.Name, args.Touches.First().ClientX, args.Touches.First().ClientY);
                        GraphModel.ActiveNode.Pos.X = Convert.ToSingle(coords.X);
                        GraphModel.ActiveNode.Pos.Y = Convert.ToSingle(coords.Y);
                    }
                    catch { }
                }
            };
            basicGraph.SvgMouseUp += (sender, args) =>
            {
                Refresh();
            };
            basicGraph.NodeClick += (sender, args) =>
            {
                Node node = args.Target;
                if (GraphModel.ActiveNode != null)
                {
                    if (GraphModel.ActiveNode.Id == node.Id)
                    {
                        node.IsActive = false;
                    }
                    else
                    {
                        GraphModel.ActiveNode.IsActive = false;
                        node.IsActive = true;
                    }
                }
                else
                {
                    node.IsActive = true;
                }
            };
        }
    }

    public void Refresh()
    {
        StateHasChanged();
        basicGraph.ChangedState();
    }
    public void Refresh(BasicGraphModel graph)
    {
        this.GraphModel = graph;
        StateHasChanged();
        basicGraph.ChangedState();
    }
}

