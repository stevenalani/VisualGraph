@page "/Account/Login"
@using System.Text.Json.Serialization;
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavManager
<AuthorizeView>
    <Authorized>
        ja
    </Authorized>
    <NotAuthorized>
        nein
    </NotAuthorized>
</AuthorizeView>
<button class="btn btn-link" @onclick="Logout">Log out</button>

<div class="card">
    <div class="card-header">
        <p class="card-title">Login</p>
    </div>
    <div class="card-body">
        <div class="form-group form-inline">
            <label class="col-form-label">Benutzername:</label><input class="form-control" type="text" @bind="username" />
        </div>
        <div class="form-group form-inline">
            <label class="col-form-label">Passwort:</label><input class="form-control" type="password" @bind="passwd" />
        </div>
        <button class="btn btn-success" @onclick="Login">Login</button>
    </div>
    <div class="card-footer">
        <p class="card-text">Kein Account? <a href="account/register">Hier registrieren</a></p>
    </div>
</div>




@code {

    public string username = "";
    private string passwd = "";
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    private async Task Login()
    {
        UserModel userModel = new UserModel()
        {
            Username = username,
            Password = passwd,
        };
        var client = HttpClientFactory.CreateClient("api");
        var data = System.Text.Json.JsonSerializer.Serialize<UserModel>(userModel);
        var content = new StringContent(data, Encoding.UTF8, "application/json");
        var result = await client.PostAsync("api/account/login", content);
        var resultData = await result.Content.ReadAsStringAsync();//await result.Content.ReadAsStreamAsync();
        var decryptJson = JsonConvert.DeserializeObject<UserModel>(resultData);
        IEnumerable<string> vals;
        result.Headers.TryGetValues("Set-Cookie", out vals);
        await JsRuntime.InvokeVoidAsync("SetCookie", vals.FirstOrDefault());
        //NavManager.NavigateTo("/", true);
    }
    private async Task Logout()
    {
        UserModel userModel = new UserModel()
        {
            Username = username,
            Password = passwd,
        };
        var client = HttpClientFactory.CreateClient("api");
        var result = client.GetAsync("api/account/logout").Result;
        var resultData = result.Content.ReadAsStringAsync().Result;//await result.Content.ReadAsStreamAsync();
        var decryptJson = JsonConvert.DeserializeObject<UserModel>(resultData);
        NavManager.NavigateTo("/", true);
    }

}
