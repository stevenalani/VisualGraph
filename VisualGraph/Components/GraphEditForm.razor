@inject IGraphService GraphService

<div class="container-fluid">
    <div class="row">
    <a class="col-1 toggler" @onclick="@(async (args) => { collapseClass = collapseClass == "" ? "collapse" : ""; Parent.Refresh();await GraphService.Resize(); })"><span class="oi oi-expand-@(collapseClass == ""?"left":"right")"></span></a>
    <div id="collapseForm" class="@collapseClass col-11">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title"><span class="oi oi-graph" aria-hidden="true"></span>Graphdaten bearbeiten</h5>
                <EditForm @onchange="(args)=> { Parent.Refresh(); }" Model="@GraphModel">
                    <div class="form-group row">
                        <label for="GraphName" class="col-form-label">Dateiname:</label>
                        <div class="col">
                            <InputText id="GraphName" class="form-control" @bind-Value="@GraphModel.Path"></InputText>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="IsDirectional" class="col-form-label">Gerichtet:</label>
                        <div class="col">
                            <InputCheckbox id="IsDirectional" class="form-control" @bind-Value="@GraphModel.IsDirectional" />
                        </div>
                        <label for="IsBidirectional" class="col-form-label">Mehrfachkanten:</label>
                        <div class="col">
                            <input type="checkbox" id="IsBidirectional" class="form-control" disabled="disabled" checked="@(GraphModel.IsBidirectional?true:false)" />
                        </div>
                    </div>
                    <hr />
                    @if (GraphModel.ActiveNode != null)
                    {
                        <h5 class="card-title"><span class="oi oi-media-record" style="color:royalblue" aria-hidden="true"></span>Aktiver Knoten</h5>
                        <table>
                            <tbody>
                                <tr>
                                    <td>Pos X:</td>
                                    <td>
                                        <input type="number" @bind="@GraphModel.ActiveNode.Pos.X" id="ActiveNodeX" class="form-control" />
                                    </td>
                                    <td>Pos Y:</td>
                                    <td>
                                        <input type="number" @bind="@GraphModel.ActiveNode.Pos.Y" id="ActiveNodeY" class="form-control" />
                                    </td>
                                    <td>Name</td>
                                    <td>
                                        <InputText id="ActiveNodeName" class="form-control" @bind-Value="@GraphModel.ActiveNode.Name"></InputText>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    }

                    <hr />
                    <h5 class="card-title"><span class="oi oi-media-record" style="color:royalblue" aria-hidden="true"></span>Knoten bearbeiten</h5>
                    <table>
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Pos X</th>
                                <th>Pos Y</th>
                                <th>Name</th>
                                <th>Löschen</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var node in GraphModel.Nodes)
                            {

                                var idstring1 = $"NodeX_{node.Id}";
                                var idstring2 = $"NodeY_{node.Id}";
                                var idstring3 = $"NodeName_{node.Id}";
                                <tr>
                                    <td><span class="form-control">@node.Id:</span></td>
                                    <td>
                                        <input type="number" @bind="@node.Pos.X" id="@idstring1" class="form-control" />
                                    </td>
                                    <td>
                                        <input type="number" @bind="@node.Pos.Y" id="@idstring2" class="form-control" />
                                    </td>
                                    <td>
                                        <InputText id="@idstring3" class="form-control" @bind-Value="@node.Name" @onchange="(args)=> { Parent.Refresh(); }"></InputText>
                                    </td>
                                    <td><button type="button" class="form-control oi oi-delete btn btn-outline-danger" @onclick="(args)=> { GraphModel.Edges.RemoveAll( x=> node.Edges.Contains(x)); GraphModel.Nodes.Remove(node); Parent.Refresh(); }"></button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <button type="button" class="btn btn-outline-success" @onclick="@AddNode">Knoten Hinzufügen</button>
                    <hr />
                    <h5 class="card-title"><span class="oi oi-media-record" style="color:royalblue" aria-hidden="true"></span>Kanten bearbeiten</h5>
                    @if (GraphModel.Edges.Count > 0)
                    {
                        <table>
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Start- Knoten</th>
                                    <th>End- Knoten </th>
                                    <th>Kanten- Gewicht</th>
                                    <th>Distanz</th>
                                    <th>Löschen</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var edge in GraphModel.Edges)
                                {
                                    <tr>
                                        <td><span class="form-control">@edge.Id:</span></td>
                                        <td>

                                            <select class="form-control" @onchange="(args) => { ChangedStartEdge(edge, args); }">
                                                @if (edge.StartNode == null)
                                                {
                                                    <option default selected="selected">Startknoten wählen</option>
                                                }
                                                @foreach (var node in GraphModel.Nodes)
                                                {
                                                    if (node == edge.EndNode) continue;
                                                    if (edge.StartNode == node)
                                                    {
                                                        <option value="@node.Id" selected="selected">@($"Id:{node.Id}; Name:{node.Name}")</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@node.Id">@($"Id:{node.Id}; Name:{node.Name}")</option>
                                                    }
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            <select class="form-control" @onchange="(args) => { ChangedEndEdge(edge, args); }">

                                                @if (edge.EndNode == null)
                                                {
                                                    <option default selected="selected">Endknoten wählen</option>
                                                }
                                                else
                                                {
                                                    <option default>Endknoten wählen</option>
                                                }
                                                @foreach (var node in GraphModel.Nodes)
                                                {
                                                    if (node == edge.StartNode) continue;
                                                    if (edge.EndNode == node)
                                                    {
                                                        <option value="@node.Id" selected="selected">@($"Id:{node.Id}; Name:{node.Name}")</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@node.Id">@($"Id:{node.Id}; Name:{node.Name}")</option>
                                                    }
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            <InputNumber class="form-control" @bind-Value="@edge.Weight"></InputNumber>
                                        </td>
                                        <td><input readonly="readonly" class="form-control" value="@edge.AutoWeight" /></td>
                                        <td><button type="button" class="form-control oi oi-delete btn btn-outline-danger" @onclick="(args)=> { GraphModel.Edges.Remove(edge);Parent.Refresh(); }"></button></td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    <button type="button" class="btn btn-outline-success" @onclick="@AddEdge">Kante hinzufügen</button>
                    <hr />
                    <button type="button" class="btn btn-outline-info" @onclick="@SaveGraph"><span class="oi oi-data-transfer-download"></span> Graph speichern </button>
                    <button type="button" class="btn btn-outline-primary" @onclick="@OpenFile"><span class="oi oi-data-transfer-upload"></span> Graph laden</button>
                    <select class="form-control" @onchange="@((args) => { FileToRead = args.Value.ToString(); })">
                        <option default>Graph auswählen</option>
                        @foreach (var file in Files)
                        {
                            <option value="@file">@file</option>
                        }

                    </select>
                </EditForm>
            </div>
        </div>
        <Skriptloader GraphModel="@GraphModel" Parent="@Parent" />
        <hr />
        <GraphConsole Graph="@GraphModel" Parent="@Parent" />
        
    </div>
</div>
</div>
@code {
    [Parameter]
    public BasicGraphModel GraphModel { get; set; }
    [Parameter]
    public IRefreshableParent Parent { get; set; }
    private string collapseClass = "collapse";

    private string[] Files { get; set; }
    private string FileToRead { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Files = await GraphService.GetGraphFilenames();
    }

    private async void OpenFile()
    {
        GraphModel = await GraphService.GetGraph(FileToRead);
        //Parent.Refresh(GraphModel);
    }
    private async void SaveGraph()
    {
        var wrongEdges = GraphModel.Edges.Where(x => x.StartNode.Id == -1 || x.EndNode.Id == -1).ToList();
        var wrongNodes = GraphModel.Nodes.Where(x => x.Id == -1).ToList();
        foreach (var node in wrongNodes)
        {
            GraphModel.Nodes.Remove(node);
        }
        foreach (var edge in wrongEdges)
        {
            GraphModel.Edges.Remove(edge);
        }
        await GraphService.SaveGraph(GraphModel, GraphModel.Name);
        Files = await GraphService.GetGraphFilenames();
        //Parent.Refresh();

    }

    private void AddNode()
    {
        if (GraphModel.ActiveNode != null)
        {
            GraphModel.ActiveNode.IsActive = false;
        }
        Node activenode = new Node
        {
            Id = GraphModel.Nodes.Max(x => x.Id) + 1,
            Pos = new Vector2(),
            IsActive = true,
        };
        GraphModel.Nodes.Add(activenode);
        StateHasChanged();
        //Parent.Refresh();
    }

    private void AddEdge()
    {
        Edge newEdge = new Edge
        {
            Id = GraphModel.Edges.Count > 0 ? GraphModel.Edges.Max(x => x.Id) + 1 : 0,
            StartNode = null,
            EndNode = null,
            Weight = 0,
        };
        GraphModel.Edges.Add(newEdge);
        StateHasChanged();
        //Parent.Refresh();
    }

    private void ChangedEndEdge(Edge edge, ChangeEventArgs args)
    {
        try
        {
            edge.EndNode = GraphModel.Nodes.First(x => x.Id == Convert.ToInt32(args.Value));
        }
        catch
        {
            edge.EndNode = null;
        }
        StateHasChanged();
        //Parent.Refresh();
    }
    private void ChangedStartEdge(Edge edge, ChangeEventArgs args)
    {
        try
        {
            edge.StartNode = GraphModel.Nodes.First(x => x.Id == Convert.ToInt32(args.Value));
        }
        catch
        {
            edge.StartNode = null;
        }
        StateHasChanged();
        //Parent.Refresh();
    }
}
