@inject IGraphService graphService

<div class="graphconsole w-100">
    <h5>Befehle auf Graph ausführen</h5>
    <p>@introMessage</p>
    <textarea rows="7" class="w-100" disabled>
        @foreach(string s in OutputText)
        {
            @(s + "\n");
        }
    </textarea>
    <EditForm Model="@Inputline" OnSubmit="@executeCommand">
        <InputText @bind-Value="@Inputline" @onkeydown="@clearCommand" class="w-100" />
    </EditForm>
</div>
@code {
    static string introMessage = "Befehle: add [ node ( name:string ) | edgebyids ( startNodeId:int endNodeId:int weight:double ) | edgebynames ( startNodeName:string endNodeName:string weight:double ) ] \r\n"
        + "example: add edgeids 0, 1, 13.50";
    private GraphCommandProcessor GraphCommandProcessor;


    string Inputline { get; set; } = "";
    List<string> OutputText = new List<string>();

    protected override void OnParametersSet()
    {
        GraphCommandProcessor = new GraphCommandProcessor(graphService.CurrentGraphModel);
    }

    private void Clear() {
        if (graphService.CurrentGraphModel != null)
            OutputText = new List<string>() { $"Führe Befehle auf Graph \"{graphService.CurrentGraphModel.Name}\" aus\n" };
        else
            OutputText = new List<string>() { $"Es ist kein Graph ausgewählt!\n" };
        StateHasChanged();
    }
    private void clearCommand(KeyboardEventArgs args)
    {
        if(args.AltKey && args.Key == "c")
        {
            Clear();
        }
    }
    private async void executeCommand()
    {
        var result = GraphCommandProcessor.Process(Inputline);
        OutputText.Add(result);
        await graphService.Rerender();
        StateHasChanged();
    }
}
