@inject IGraphService graphService

<path draggable="true" class="@(((ICSSProperties)Edge).ClassesProppertie) edge @Edge.Activeclass"
      d="M @startPos.X.ToString(CultureInfo.InvariantCulture) @startPos.Y.ToString(CultureInfo.InvariantCulture) Q @disiredPoint.X.ToString(CultureInfo.InvariantCulture) @disiredPoint.Y.ToString(CultureInfo.InvariantCulture) @endPos.X.ToString(CultureInfo.InvariantCulture) @endPos.Y.ToString(CultureInfo.InvariantCulture)"
      marker-end="url(#arrow)"
      @onclick="(args) => {  }" @onclick:stopPropagation="true"
      @ondrag="MoveCurvePoint"
      @onmousedown="(args) => {  }" @onmousedown:stopPropagation="true"
      @onmouseup="(args) => {  }" @onmouseup:stopPropagation="true"
      @ontouchstart="(args) => { }" @ontouchstart:stopPropagation="true"
      @ontouchenter="(args) => {  }" @ontouchenter:stopPropagation="true"
      @ontouchend="(args) => {  }" @ontouchend:stopPropagation="true" />
<circle draggable="true" cx="@disiredPoint.X.ToString(CultureInfo.InvariantCulture)"
        cy="@disiredPoint.Y.ToString(CultureInfo.InvariantCulture)"
        r="0.5"
        @ondrag="MoveCurvePoint"></circle>
@((MarkupString)$"<text x=\"{textpos.X.ToString(CultureInfo.InvariantCulture)}\" y=\"{textpos.Y.ToString(CultureInfo.InvariantCulture)}\">{String.Format("{0:0.00}", @Edge.Weight)} <tspan class=\"hovertext\">Distanz: {String.Format("{0:0.00}", @Edge.AutoWeight)}</tspan></text>")

@code {
    [Parameter]
    public Edge Edge { get; set; }
    [Parameter]
    public BasicGraph Graph { get; set; }

    private Vector2 textpos;
    private Vector2 startPos;
    private Vector2 endPos;
    private Vector2 disiredPoint;

    protected override void OnInitialized()
    {
        var dir = Vector2.Normalize(Edge.EndNode.Pos - Edge.StartNode.Pos);
        startPos = Edge.StartNode.Pos + dir * (float)graphService.GraphStyleParameters.NodeRadius;
        endPos = Edge.EndNode.Pos - dir * ((float)graphService.GraphStyleParameters.NodeRadius + (float)graphService.GraphStyleParameters.NodeStrokeWidth);
        var curvepoint = startPos + dir * ((endPos - startPos).Length() / 2);
        var rotatedDir = Vector2.Transform(dir, Matrix3x2.CreateRotation(MathF.PI / 2));
        var lengthofVector = rotatedDir * (curvepoint - startPos).Length();
        disiredPoint = lengthofVector * Edge.curveScale + curvepoint;
        textpos = lengthofVector * 0.1f + curvepoint;
    }
    private void MoveCurvePoint(DragEventArgs args)
    {
        Console.WriteLine(args.ClientX);
    }

}
