@inject IJSRuntime JsRuntime
@inject IGraphService GraphService
@if (GraphModel != null)
{
    var activenode = GraphModel.ActiveNode;
    @SVGViewRect.GetDisplayInformationMarkupString(GraphStyleParameters)
    <svg id="@(GraphModel.Name)" class="vssvg" viewBox="@(SVGViewRect.ViewBox)"
         @onclick="@OnSvgClick"
         @onmousemove="@OnSvgMouseMove"
         @onmouseup="@OnSvgMouseUp"
         @onmousedown="@OnSvgMouseDown"
         @onmousewheel="@OnSvgMouseWheel"
         @onkeydown="@OnSvgKeyDown">
        <defs>
            <marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"
                    markerWidth="6" markerHeight="6"
                    orient="auto-start-reverse">
                <path d="M 0 0 L 9 5 L 0 10 z"
                      stroke="@GraphStyleParameters.EdgeStrokeColor"
                      stroke-width="@GraphStyleParameters.EdgeWidthText" />
            </marker>
        </defs>
        @CoordinateAxis.GenerateForGraphRange(GraphModel.ConvexHull[0].X, GraphModel.ConvexHull[0].Y, GraphModel.ConvexHull[1].X, GraphModel.ConvexHull[1].Y);
        @if (activenode != null)
        {
            <line x1="@activenode.PosXText" y1="@activenode.PosYText" x2="0" y2="@activenode.PosYText" style="@($"stroke:rgba(0,0,0,0.5); stroke-width:0.1")"></line>
            <line x1="@activenode.PosXText" y1="@activenode.PosYText" x2="@activenode.PosXText" y2="0" style="@($"stroke:rgba(0,0,0,0.5); stroke-width:0.1")"></line>
        }
        @foreach (var edge in GraphModel.Edges)
        {
            if (edge.StartNode != null && edge.EndNode != null)
            {
                var reverseEdge = GraphModel.Edges.FirstOrDefault(x => x.StartNode == edge.EndNode && x.EndNode == edge.StartNode);
                var halfwayx = ((edge.StartNode.Pos.X + edge.EndNode.Pos.X) / 2).ToString(CultureInfo.InvariantCulture);
                var halfwayy = ((edge.StartNode.Pos.Y + edge.EndNode.Pos.Y) / 2).ToString(CultureInfo.InvariantCulture);
                var dir = Vector2.Normalize(edge.EndNode.Pos - edge.StartNode.Pos);
                var startPos = edge.StartNode.Pos + dir * (float)GraphStyleParameters.NodeRadius;
                var endPos = edge.EndNode.Pos - dir * ((float)GraphStyleParameters.NodeRadius + (float)GraphStyleParameters.NodeStrokeWidth);
                if (reverseEdge == null)
                {
                    <line class="@(((ICSSProperties)edge).ClassesProppertie)"
                          x1="@((startPos.X).ToString(CultureInfo.InvariantCulture))"
                          y1="@((startPos.Y).ToString(CultureInfo.InvariantCulture))"
                          x2="@((endPos.X).ToString(CultureInfo.InvariantCulture))"
                          y2="@((endPos.Y).ToString(CultureInfo.InvariantCulture))"
                          style="@($"stroke:{GraphStyleParameters.EdgeStrokeColor}; stroke-width:{GraphStyleParameters.EdgeWidthText}")"
                          marker-end="url(#arrow)" />
                    @((MarkupString)$"<text x=\"{@halfwayx}\" y=\"{@halfwayy}\" fill=\"{GraphStyleParameters.TextColor}\" font-size=\"{GraphStyleParameters.TextSizeText}\">{String.Format("{0:0.00}", @edge.Weight)} <tspan font-size=\"{ (GraphStyleParameters.TextSize / 2).ToString(CultureInfo.InvariantCulture)}\">Distance:{String.Format("{0:0.00}", @edge.AutoWeight)}</tspan></text>")
                }
                else
                {
                    var curvepoint = startPos + dir * ((endPos - startPos).Length() / 2);
                    var rotatedDir = Vector2.Transform(dir, Matrix3x2.CreateRotation(MathF.PI / 2));
                    var lengthofVector = rotatedDir * (curvepoint - startPos).Length();
                    var disiredPoint = lengthofVector * 0.2f + curvepoint;
                    var testpos = lengthofVector * 0.1f + curvepoint;
                    <path class="@(((ICSSProperties)edge).ClassesProppertie)"
                          d="M @startPos.X.ToString(CultureInfo.InvariantCulture) @startPos.Y.ToString(CultureInfo.InvariantCulture) Q @disiredPoint.X.ToString(CultureInfo.InvariantCulture) @disiredPoint.Y.ToString(CultureInfo.InvariantCulture) @endPos.X.ToString(CultureInfo.InvariantCulture) @endPos.Y.ToString(CultureInfo.InvariantCulture)"
                          stroke="@GraphStyleParameters.EdgeStrokeColor"
                          stroke-width="@GraphStyleParameters.EdgeWidthText"
                          fill="transparent"
                          marker-end="url(#arrow)" />
                    @((MarkupString)$"<text x=\"{@testpos.X.ToString(CultureInfo.InvariantCulture)}\" y=\"{@testpos.Y.ToString(CultureInfo.InvariantCulture)}\" fill=\"{GraphStyleParameters.TextColor}\" font-size=\"{GraphStyleParameters.TextSizeText}\">{String.Format("{0:0.00}", @edge.Weight)} <tspan font-size=\"{ (GraphStyleParameters.TextSize / 2).ToString(CultureInfo.InvariantCulture)}\">Distance:{String.Format("{0:0.00}", @edge.AutoWeight)}</tspan></text>")
                }

            }
        }
        @foreach (var node in GraphModel.Nodes)
        {
            var name = node.Name;
            @((MarkupString)$"<text x=\"{ (@node.Pos.X+ GraphStyleParameters.NodeRadius).ToString(CultureInfo.InvariantCulture)}\" y=\"{(@node.Pos.Y + 2 * GraphStyleParameters.NodeRadius).ToString(CultureInfo.InvariantCulture)}\" fill=\"{GraphStyleParameters.TextColor}\" font-size=\"{GraphStyleParameters.TextSizeText}\">{@node.Name}</text>");
            if (node.IsActive)
                @((MarkupString)$"<text text-anchor=\"middle\" x=\"{ (@node.Pos.X).ToString(CultureInfo.InvariantCulture)}\" y=\"{(@node.Pos.Y + 2 * GraphStyleParameters.NodeRadius + GraphStyleParameters.TextSize * 0.9).ToString(CultureInfo.InvariantCulture)}\" fill=\"{GraphStyleParameters.TextColor}\" font-size=\"{GraphStyleParameters.TextSizeText}\"> { String.Format("P( {0,0:0.00} ; {1,0:0.00} )", @node.Pos.X, @node.Pos.Y)}</text>")
                <circle id="@($"node-{ node.Id}")"
                        class="vsnode @node.Activeclass draggable @(((ICSSProperties)node).ClassesProppertie)"
                        cx="@node.PosXText"
                        cy="@(node.PosYText)"
                        r="@GraphStyleParameters.NodeRadiusText"
                        stroke="@GraphStyleParameters.NodeStrokeColor"
                        stroke-width="@GraphStyleParameters.NodeStrokeWidthText"
                        fill="@GraphStyleParameters.NodeFill"
                        @onclick="(args) => { OnNodeClick(args, node); }" onclick:event.stopPropagation
                        @onmousedown="(args) => { OnNodeMouseDown(args, node); }" onmousedown:event.stopPropagation
                        @onmouseup="(args) => { OnNodeMouseUp(args, node); }" onmouseup:event.stopPropagation>
                    test
                </circle>
            }
    </svg>
}



@code {
    public GraphDisplayParameters SVGMatrix;
    public GraphStyleParameters GraphStyleParameters = new GraphStyleParameters();
    public SvgViewRect SVGViewRect = new SvgViewRect();

    [Parameter]
    public VisualGraph.Data.Additional.Models.BasicGraphModel GraphModel { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
        {
            var SvgElement = await GraphService.InitialGetGraphDisplayParameters(GraphModel.Name);
            SVGViewRect.SetWidth(SvgElement.Width);
            SVGViewRect.SetHeight(SvgElement.Height);
            StateHasChanged();
            GraphService.InitZoomPan("svg#" + GraphModel.Name);
        }

    }
    public async Task ChangedState()
    {
        StateHasChanged();
    }



    #region EventHandling
    DateTime NodeClickTriggerdTime;
    DateTime SvgClickTriggerdTime;
    public bool NodeDragStarted = false;

    public event EventHandler Update;
    public event EventHandler<MouseEventArgs> SvgClick;
    public event EventHandler<MouseEventArgs> SvgMouseDown;
    public event EventHandler<MouseEventArgs> SvgMouseUp;
    public event EventHandler<MouseEventArgs> SvgMouseMove;
    public event EventHandler<WheelEventArgs> SvgMouseWheel;
    public event EventHandler<KeyboardEventArgs> SvgKeyDown;

    public event EventHandler<GraphMouseEventArgs<Node>> NodeClick;
    public event EventHandler<GraphMouseEventArgs<Node>> NodeMouseDown;
    public event EventHandler<GraphMouseEventArgs<Node>> NodeMouseUp;
    public event EventHandler<GraphMouseEventArgs<Node>> NodeMouseMove;

    public event EventHandler<WheelEventArgs> NodeMouseWheel;

    public async Task UpdateSvgTransformationMatrix()
    {
        SVGMatrix = await GraphService.InitialGetGraphDisplayParameters(GraphModel.Name);
    }

    protected virtual void OnSvgClick(MouseEventArgs e)
    {

        EventHandler<MouseEventArgs> handler = SvgClick;
        if (handler != null && NodeClick == null)
        {
            handler(this, e);
        }
        else if (NodeClick != null && NodeClickTriggerdTime < DateTime.Now.AddMilliseconds(-100))
        {
            handler(this, e);
        }
    }
    protected virtual void OnSvgMouseDown(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = SvgMouseDown;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual void OnSvgMouseUp(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = SvgMouseUp;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual void OnSvgMouseMove(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = SvgMouseMove;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual void OnSvgMouseWheel(WheelEventArgs e)
    {
        EventHandler<WheelEventArgs> handler = SvgMouseWheel;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual async Task OnSvgKeyDown(KeyboardEventArgs e)
    {
        EventHandler<KeyboardEventArgs> handler = SvgKeyDown;
        if (handler != null)
        {
            handler(this, e);
        }
    }

    protected virtual void OnNodeClick(MouseEventArgs e, Node node)
    {
        EventHandler<GraphMouseEventArgs<Node>> handler = NodeClick;
        if (handler != null)
        {
            NodeClickTriggerdTime = DateTime.Now;
            handler(this, new GraphMouseEventArgs<Node>(node, e));
        }
    }
    protected virtual void OnNodeMouseDown(MouseEventArgs e, Node node)
    {
        EventHandler<GraphMouseEventArgs<Node>> handler = NodeMouseDown;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Node>(node, e));
        }
    }
    protected virtual void OnNodeMouseUp(MouseEventArgs e, Node node)
    {
        EventHandler<GraphMouseEventArgs<Node>> handler = NodeMouseUp;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Node>(node, e));
        }
    }
    protected virtual void OnNodeMouseMove(MouseEventArgs e, Node node)
    {
        EventHandler<GraphMouseEventArgs<Node>> handler = NodeMouseMove;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Node>(node, e));
        }
    }
    protected virtual void OnNodeMouseWheel(WheelEventArgs e)
    {
        EventHandler<WheelEventArgs> handler = NodeMouseWheel;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    #endregion
}

