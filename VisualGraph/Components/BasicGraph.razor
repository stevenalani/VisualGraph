@inject IGraphService GraphService
@inherits GraphInternalUI

@if (graphService.CurrentGraphModel != null && SvgDisplay != null)
{
    var activenode = graphService.CurrentGraphModel.ActiveNode;
    <svg id="@(graphService.CurrentGraphModel.Name)" class="vssvg img-fluid" viewBox="@(SvgDisplay.ViewBox)"
         @onclick="@OnSvgClick"
         @onmousemove="@OnSvgMouseMove"
         @onmouseup="@OnSvgMouseUp"
         @onmousedown="@OnSvgMouseDown"
         @onmousewheel="@OnSvgMouseWheel"
         @onkeydown="@OnSvgKeyDown"
         @ontouchmove="@OnSvgTouchMove">
        <defs>
            <marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"
                    markerWidth="6" markerHeight="6"
                    orient="auto-start-reverse">
                <path d="M 0 0 L 9 5 L 0 10 z"
                      stroke="@graphService.GraphStyleParameters.EdgeStrokeColor"
                      stroke-width="@graphService.GraphStyleParameters.EdgeWidthText" />
            </marker>
            <marker id="axisarrow" viewBox="0 0 10 10" refX="5" refY="5"
                    markerWidth="10" markerHeight="10"
                    orient="auto-start-reverse">
                <path d="M 0 0 L 9 5 L 0 10"
                      stroke="grey"
                      stroke-width="0.4"
                      fill="none" />
            </marker>
        </defs>
        @CoordinateAxis.GenerateForGraphRange(graphService.CurrentGraphModel.ConvexHull[0].X, graphService.CurrentGraphModel.ConvexHull[0].Y, graphService.CurrentGraphModel.ConvexHull[1].X, graphService.CurrentGraphModel.ConvexHull[1].Y);
        @if (activenode != null)
        {
            <line x1="@activenode.PosXText" y1="@activenode.PosYText" x2="0" y2="@activenode.PosYText" style="@($"stroke:rgba(0,0,0,0.5); stroke-width:0.1")"></line>
            <line x1="@activenode.PosXText" y1="@activenode.PosYText" x2="@activenode.PosXText" y2="0" style="@($"stroke:rgba(0,0,0,0.5); stroke-width:0.1")"></line>
        }
        @foreach (var edge in graphService.CurrentGraphModel.Edges)
        {
            if (edge.StartNode != null && edge.EndNode != null)
            {
                <g>
                    @{
                        var reverseEdge = graphService.CurrentGraphModel.Edges.FirstOrDefault(x => x.StartNode == edge.EndNode && x.EndNode == edge.StartNode);
                        var halfwayx = ((edge.StartNode.Pos.X + edge.EndNode.Pos.X) / 2).ToString(CultureInfo.InvariantCulture);
                        var halfwayy = ((edge.StartNode.Pos.Y + edge.EndNode.Pos.Y) / 2).ToString(CultureInfo.InvariantCulture);
                        if (graphService.CurrentGraphModel.IsDirectional)
                        {
                            var dir = Vector2.Normalize(edge.EndNode.Pos - edge.StartNode.Pos);
                            var startPos = edge.StartNode.Pos + dir * (float)graphService.GraphStyleParameters.NodeRadius;
                            var endPos = edge.EndNode.Pos - dir * ((float)graphService.GraphStyleParameters.NodeRadius + (float)graphService.GraphStyleParameters.NodeStrokeWidth);
                            if (reverseEdge == null)
                            {

                                <line class="@(((ICSSProperties)edge).ClassesProppertie) edge"
                                      x1="@((startPos.X).ToString(CultureInfo.InvariantCulture))"
                                      y1="@((startPos.Y).ToString(CultureInfo.InvariantCulture))"
                                      x2="@((endPos.X).ToString(CultureInfo.InvariantCulture))"
                                      y2="@((endPos.Y).ToString(CultureInfo.InvariantCulture))"
                                      marker-end="url(#arrow)"
                                      @onmousedown="(args) => { OnEdgeMouseDown(args, edge); }" />
                                @((MarkupString)$"<text x=\"{@halfwayx}\" y=\"{@halfwayy}\" >{String.Format("{0:0.00}", @edge.Weight)} <tspan class=\"hovertext\">Distanz: {String.Format("{0:0.00}", @edge.AutoWeight)}</tspan></text>")
                            }
                            else
                            {
                                var curvepoint = startPos + dir * ((endPos - startPos).Length() / 2);
                                var rotatedDir = Vector2.Transform(dir, Matrix3x2.CreateRotation(MathF.PI / 2));
                                var lengthofVector = rotatedDir * (curvepoint - startPos).Length();
                                var disiredPoint = lengthofVector * 0.2f + curvepoint;
                                var testpos = lengthofVector * 0.1f + curvepoint;
                                <path class="@(((ICSSProperties)edge).ClassesProppertie) edge"
                                      d="M @startPos.X.ToString(CultureInfo.InvariantCulture) @startPos.Y.ToString(CultureInfo.InvariantCulture) Q @disiredPoint.X.ToString(CultureInfo.InvariantCulture) @disiredPoint.Y.ToString(CultureInfo.InvariantCulture) @endPos.X.ToString(CultureInfo.InvariantCulture) @endPos.Y.ToString(CultureInfo.InvariantCulture)"
                                      marker-end="url(#arrow)"
                                      @onmousedown="(args) => { OnEdgeMouseDown(args, edge); }" />
                                @((MarkupString)$"<text x=\"{@testpos.X.ToString(CultureInfo.InvariantCulture)}\" y=\"{@testpos.Y.ToString(CultureInfo.InvariantCulture)}\">{String.Format("{0:0.00}", @edge.Weight)} <tspan class=\"hovertext\">Distanz: {String.Format("{0:0.00}", @edge.AutoWeight)}</tspan></text>")
                            }
                        }
                        else
                        {
                            var startPos = edge.StartNode.Pos;
                            var endPos = edge.EndNode.Pos;
                            if (reverseEdge == null)
                            {
                                <line class="@(((ICSSProperties)edge).ClassesProppertie) edge"
                                      x1="@((startPos.X).ToString(CultureInfo.InvariantCulture))"
                                      y1="@((startPos.Y).ToString(CultureInfo.InvariantCulture))"
                                      x2="@((endPos.X).ToString(CultureInfo.InvariantCulture))"
                                      y2="@((endPos.Y).ToString(CultureInfo.InvariantCulture))"
                                      @onmousedown="(args) => { OnEdgeMouseDown(args, edge); }" />
                                @((MarkupString)$"<text x=\"{@halfwayx}\" y=\"{@halfwayy}\" >{String.Format("{0:0.00}", @edge.Weight)} <tspan class=\"hovertext\">Distanz: {String.Format("{0:0.00}", @edge.AutoWeight)}</tspan></text>")
                            }
                        }
                    }
                </g>
            }
        }
        @foreach (var node in graphService.CurrentGraphModel.Nodes)
        {
            var name = node.Name;
            @((MarkupString)$"<text class=\"nodeText\" x=\"{ (@node.Pos.X + graphService.GraphStyleParameters.NodeRadius).ToString(CultureInfo.InvariantCulture)}\" y=\"{(@node.Pos.Y + 2 *graphService.GraphStyleParameters.NodeRadius).ToString(CultureInfo.InvariantCulture)}\">{@node.Name}</text>");
            if (node.IsActive)
                @((MarkupString)$"<text class=\"nodeText\" text-anchor=\"middle\" x=\"{ (@node.Pos.X).ToString(CultureInfo.InvariantCulture)}\" y=\"{(@node.Pos.Y + 2 *graphService.GraphStyleParameters.NodeRadius +graphService.GraphStyleParameters.TextSize * 0.9).ToString(CultureInfo.InvariantCulture)}\"> { String.Format("P( {0,0:0.00} ; {1,0:0.00} )", @node.Pos.X, @node.Pos.Y)}</text>")
                <circle id="@($"node-{ node.Id}")"
                        class="vsnode @node.Activeclass @(((ICSSProperties)node).ClassesProppertie)"
                        cx="@node.PosXText"
                        cy="@(node.PosYText)"
                        r="@graphService.GraphStyleParameters.NodeRadiusText"
                        @onclick="(args) => { OnNodeClick(args, node); }" onclick:event.stopPropagation
                        @onmousedown="(args) => { OnNodeMouseDown(args, node); }" onmousedown:event.stopPropagation
                        @onmouseup="(args) => { OnNodeMouseUp(args, node); }" onmouseup:event.stopPropagation
                        @ontouchstart="(args) => { OnTouchStart(args, node); }" ontouchstart:event.stopPropagation
                        @ontouchenter="(args) => { OnTouchEnter(args, node); }" ontouchenter:event.stopPropagation
                        @ontouchend="(args) => { OnTouchEnd(args, node); }" ontouchend:event.stopPropagation>
                </circle>
            }
    </svg>
    <div id="legend">
        <span class="legend-row"><a class="startnode legend-node"></a> Startknoten</span><br />
        <span class="legend-row"><a class="endnode legend-node"></a> Endknoten</span><br />
        <span class="legend-row"><a class="active legend-node"></a> Aktiver Knoten</span><br />
        <span class="legend-row"><a class="legend-edge"></a> Kante</span><br />
        <span class="legend-row"><a class="pathedge legend-edge"></a> Kante auf Route</span>
    </div>
    <EdgeContextMenu @ref="edgeContextMenu" />
    <NodeContextMenu @ref="nodeContextMenu" />
}
else
{
    <p>Kein Graph gewählt</p>
}



@code {
    EdgeContextMenu edgeContextMenu;
    NodeContextMenu nodeContextMenu;
    public SvgDisplay SvgDisplay;

    private DotNetObjectReference<BasicGraph> dotnetreference;

    public override IGraphService graphService => GraphService;

    [JSInvokable("UpdateDisplay")]
    public Task<bool> UpdateDisplay(SvgPanZoomInformation svgInformation)
    {
        return Task.FromResult(SvgDisplay.UpdateDisplaySettings(svgInformation));
    }

    private string oldGraphName = string.Empty;


    protected override void OnInitialized()
    {
        SvgDisplay = new SvgDisplay(
            graphService.CurrentGraphModel.ConvexHull[0].X - 10,
            graphService.CurrentGraphModel.ConvexHull[0].Y - 10,
            graphService.CurrentGraphModel.ConvexHull[1].X + 10,
            graphService.CurrentGraphModel.ConvexHull[1].Y + 10);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        await base.OnAfterRenderAsync(firstrender);

        if (firstrender)
        {
            dotnetreference = DotNetObjectReference.Create(this);
            await graphService.InitZoomPan(dotnetreference);
        }
        if (graphService.CurrentGraphModel != null && oldGraphName != graphService.CurrentGraphModel.Name)
        {
            oldGraphName = graphService.CurrentGraphModel.Name;

            var displayinfo = await graphService.GetSvgContainerInformation();
            SvgDisplay.UpdateDisplaySettings(displayinfo);
            await graphService.Crop();
            StateHasChanged();
            return;
        }

    }

    public async void DisablePan()
    {
        await graphService.DisablePan();
    }
    public async void EnablePan()
    {
        await graphService.EnablePan();
    }

    #region EventHandling
    public bool NodeDragStarted = false;

    public event EventHandler<MouseEventArgs> SvgClick;
    public event EventHandler<MouseEventArgs> SvgMouseDown;
    public event EventHandler<MouseEventArgs> SvgMouseUp;
    public event EventHandler<MouseEventArgs> SvgMouseMove;
    public event EventHandler<WheelEventArgs> SvgMouseWheel;
    public event EventHandler<KeyboardEventArgs> SvgKeyDown;

    public event EventHandler<TouchEventArgs> SvgTouchMove;

    public event EventHandler<GraphMouseEventArgs<Node>> NodeClick;
    public event EventHandler<GraphMouseEventArgs<Node>> NodeMouseDown;
    public event EventHandler<GraphMouseEventArgs<Node>> NodeMouseUp;
    public event EventHandler<GraphMouseEventArgs<Node>> NodeMouseMove;

    public event EventHandler<GraphTouchEventArgs<Node>> NodeTouchStart;
    public event EventHandler<GraphTouchEventArgs<Node>> NodeTouchEnd;
    public event EventHandler<GraphTouchEventArgs<Node>> NodeTouchEnter;

    public event EventHandler<WheelEventArgs> NodeMouseWheel;

    public event EventHandler<GraphMouseEventArgs<Edge>> EdgeMouseDown;

    protected virtual void OnSvgClick(MouseEventArgs e)
    {

        EventHandler<MouseEventArgs> handler = SvgClick;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual void OnSvgMouseDown(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = SvgMouseDown;
        if (handler != null)
        {
            handler(this, e);

        }
    }
    protected virtual void OnSvgMouseUp(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = SvgMouseUp;
        if (handler != null)
        {
            handler(this, e);

        }
    }
    protected virtual void OnSvgMouseMove(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = SvgMouseMove;
        if (handler != null)
        {
            handler(this, e);

        }
    }
    protected virtual void OnSvgMouseWheel(WheelEventArgs e)
    {
        EventHandler<WheelEventArgs> handler = SvgMouseWheel;
        if (handler != null)
        {
            handler(this, e);

        }
    }
    protected virtual void OnSvgKeyDown(KeyboardEventArgs e)
    {
        EventHandler<KeyboardEventArgs> handler = SvgKeyDown;
        if (handler != null)
        {
            handler(this, e);
        }
    }

    protected virtual void OnSvgTouchMove(TouchEventArgs e)
    {

        EventHandler<TouchEventArgs> handler = SvgTouchMove;
        if (handler != null)
        {
            handler(this, e);
        }
    }


    protected virtual void OnNodeClick(MouseEventArgs e, Node node)
    {
        EventHandler<GraphMouseEventArgs<Node>> handler = NodeClick;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Node>(node, e));
        }
    }
    protected virtual void OnTouchStart(TouchEventArgs e, Node node)
    {
        EventHandler<GraphTouchEventArgs<Node>> handler = NodeTouchStart;
        if (handler != null)
        {
            handler(this, new GraphTouchEventArgs<Node>(node, e));

        }
    }
    protected virtual void OnTouchEnd(TouchEventArgs e, Node node)
    {
        EventHandler<GraphTouchEventArgs<Node>> handler = NodeTouchEnd;
        if (handler != null)
        {
            handler(this, new GraphTouchEventArgs<Node>(node, e));

        }
    }
    protected virtual void OnTouchEnter(TouchEventArgs e, Node node)
    {
        EventHandler<GraphTouchEventArgs<Node>> handler = NodeTouchEnter;
        if (handler != null)
        {
            handler(this, new GraphTouchEventArgs<Node>(node, e));

        }
    }
    protected virtual void OnNodeMouseDown(MouseEventArgs e, Node node)
    {
        EventHandler<GraphMouseEventArgs<Node>> handler = NodeMouseDown;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Node>(node, e));

        }
    }
    protected virtual void OnNodeMouseUp(MouseEventArgs e, Node node)
    {
        EventHandler<GraphMouseEventArgs<Node>> handler = NodeMouseUp;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Node>(node, e));

        }
    }
    protected virtual void OnNodeMouseMove(MouseEventArgs e, Node node)
    {
        EventHandler<GraphMouseEventArgs<Node>> handler = NodeMouseMove;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Node>(node, e));

        }
    }
    protected virtual void OnNodeMouseWheel(WheelEventArgs e)
    {
        EventHandler<WheelEventArgs> handler = NodeMouseWheel;
        if (handler != null)
        {
            handler(this, e);
        }
    }

    protected virtual void OnEdgeMouseDown(MouseEventArgs e, Edge edge)
    {
        EventHandler<GraphMouseEventArgs<Edge>> handler = EdgeMouseDown;
        if (handler != null)
        {
            handler(this, new GraphMouseEventArgs<Edge>(edge, e));
        }
    }
    #endregion

    public async Task<Point2> RequestTransformedEventPosition(double x, double y)
    {
        return await graphService.GetTranslatedMousePos(x, y);
    }

    #region Defaut Callbacks

    public void RegisterDefaultCallbacks()
    {

        this.NodeMouseDown += DefaultCallbacks.ActivateDragNode;
        this.NodeTouchStart += DefaultCallbacks.ToggleActiveStateNode;
        this.NodeTouchStart += DefaultCallbacks.ActivateDragNode;
        this.NodeMouseUp += DefaultCallbacks.DeactivateDragNode;
        this.NodeTouchEnd += DefaultCallbacks.DeactivateDragNode;
        this.SvgMouseMove += DefaultCallbacks.MoveNode;
        this.SvgTouchMove += DefaultCallbacks.MoveNode;
        this.SvgMouseUp += DefaultCallbacks.DeactivateDragNode;
        this.NodeClick += DefaultCallbacks.ToggleActiveStateNode;
        this.EdgeMouseDown += async (sender, args) =>
        {
            if (args.MouseEventArgs.Button == 2)
            {
                await edgeContextMenu.SetParametersAsync(ParameterView.FromDictionary(
                  new Dictionary<string, object>()
                    {
                        { "Edge", args.Target },
                        { "PosX", args.MouseEventArgs.ClientX },
                        { "PosY", args.MouseEventArgs.ClientY }
                            }
                  ));
                edgeContextMenu.visible = true;
            }
        };
        this.NodeMouseDown += async (sender, args) =>
        {
            if (args.MouseEventArgs.Button == 2)
            {
                await nodeContextMenu.SetParametersAsync(ParameterView.FromDictionary(
                  new Dictionary<string, object>()
                    {
                        { "Node", args.Target },
                        { "PosX", args.MouseEventArgs.ClientX },
                        { "PosY", args.MouseEventArgs.ClientY }
                            }
                  ));
                nodeContextMenu.visible = true;
            }
        };
        SvgClick += async (sender, args) =>
        {
            Console.WriteLine("clicked svg");
            edgeContextMenu.visible = false;
            nodeContextMenu.visible = false;
            await graphService.Rerender();
        };
    }
    #endregion
}

