@inject IJSRuntime JsRuntime
@inject IGraphService GraphServeice
@if (GraphModel != null)
{
    var activenode = GraphModel.ActiveNode;
    <svg id="@(GraphModel.Name)" class="vssvg" viewBox="@(SVGViewRect.ViewBox)"
         @onclick="@OnSvgClick"
         @onmousemove="@OnSvgMouseMove"
         @onmouseover="@((args) => { GraphServeice.StartParameterRefresh(); })"
         @onmouseout="@((args) => { GraphServeice.StopParameterRefresh(); })"
         @onmouseup="@OnSvgMouseUp"
         @onmousedown="@OnSvgMouseDown"
         @onmousewheel="@OnSvgMouseWheel"
         @onkeypress="@OnSvgKeyDown">
        @SVGViewRect.GetDisplayInformationMarkupString(GraphStyleParameters)
        @CoordinateAxis.GenerateForGraphRange(GraphModel.ConvexHull[0].X, GraphModel.ConvexHull[0].Y, GraphModel.ConvexHull[1].X, GraphModel.ConvexHull[1].Y);
        @if (activenode != null)
        {
            <line x1="@activenode.PosXText" y1="@activenode.PosYText" x2="0" y2="@activenode.PosYText" style="@($"stroke:rgba(0,0,0,0.5); stroke-width:0.1")"></line>
            <line x1="@activenode.PosXText" y1="@activenode.PosYText" x2="@activenode.PosXText" y2="0" style="@($"stroke:rgba(0,0,0,0.5); stroke-width:0.1")"></line>
        }
        @foreach (var edge in GraphModel.Edges)
        {
            if (edge.StartNode != null && edge.EndNode != null)
            {
                var halfwayx = ((edge.StartNode.Pos.X+ edge.EndNode.Pos.X) / 2).ToString(CultureInfo.InvariantCulture);
                var halfwayy = ((edge.StartNode.Pos.Y + edge.EndNode.Pos.Y) / 2).ToString(CultureInfo.InvariantCulture);
                <line x1="@edge.StartNode.PosXText" y1="@edge.StartNode.PosYText" x2="@edge.EndNode.PosXText" y2="@edge.EndNode.PosYText" style="@($"stroke:{GraphStyleParameters.EdgeStrokeColor}; stroke-width:{GraphStyleParameters.EdgeWidthText}")"></line>
                @((MarkupString)$"<text x=\"{@halfwayx}\" y=\"{@halfwayy}\" fill=\"{GraphStyleParameters.TextColor}\" font-size=\"{GraphStyleParameters.TextSizeText}\">{String.Format("{0:0.00}", @edge.Weight)} <tspan font-size=\"{ (GraphStyleParameters.TextSize / 2).ToString(CultureInfo.InvariantCulture)}\">Distance:{String.Format("{0:0.00}", @edge.AutoWeight)}</tspan></text>")
            }
        }
        @foreach (var node in GraphModel.Nodes)
        {
            var name = node.Name;
            @((MarkupString)$"<text x=\"{ (@node.Pos.X+ GraphStyleParameters.NodeRadius).ToString(CultureInfo.InvariantCulture)}\" y=\"{(@node.Pos.Y + 2 * GraphStyleParameters.NodeRadius).ToString(CultureInfo.InvariantCulture)}\" fill=\"{GraphStyleParameters.TextColor}\" font-size=\"{GraphStyleParameters.TextSizeText}\">{@node.Name}</text>");
            if (node.IsActive)
                @((MarkupString)$"<text text-anchor=\"middle\" x=\"{ (@node.Pos.X).ToString(CultureInfo.InvariantCulture)}\" y=\"{(@node.Pos.Y + 2 * GraphStyleParameters.NodeRadius + GraphStyleParameters.TextSize * 0.9).ToString(CultureInfo.InvariantCulture)}\" fill=\"{GraphStyleParameters.TextColor}\" font-size=\"{GraphStyleParameters.TextSizeText}\"> { String.Format("P( {0,0:0.00} ; {1,0:0.00} )", @node.Pos.X, @node.Pos.Y)}</text>");
                <circle id="@($"node -{ node.Id}")"
                        class="vsnode @node.activeclass draggable"
                        cx="@node.PosXText"
                        cy="@(node.PosYText)"
                        r="@GraphStyleParameters.NodeRadiusText"
                        stroke="@GraphStyleParameters.NodeStrokeColor"
                        stroke-width="@GraphStyleParameters.NodeStrokeWidthText"
                        fill="@GraphStyleParameters.NodeFill"
                        @onclick="(args) => { OnNodeClick(args, node); }">
                </circle>
            }
    </svg>
}



@code {
    public GraphDisplayParameters SVGMatrix;
    public GraphStyleParameters GraphStyleParameters = new GraphStyleParameters();
    public SvgViewRect SVGViewRect = new SvgViewRect();

    [Parameter]
    public VisualGraph.Data.Additional.Models.BasicGraphModel GraphModel { get; set; }

    protected override async Task OnParametersSetAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
        {
            SvgKeyDown += (sender, args) =>
            {
                if (args.CtrlKey && args.Key == "+")
                {
                    SVGViewRect.TextSize += 0.1;
                }
                if (args.CtrlKey && args.Key == "-")
                {
                    SVGViewRect.TextSize -= 0.1;
                }
            };
            SVGMatrix = await GraphServeice.InitialGetGraphDisplayParameters(GraphModel.Name);
            SVGViewRect.SetWidth(SVGMatrix.Width);
            SVGViewRect.SetHeight(SVGMatrix.Height);
        }
        if (GraphModel != null)
        {

        }
    }
    public async Task ChangedState()
    {
        StateHasChanged();
    }



    #region EventHandling

    public event EventHandler Update;
    public event EventHandler<MouseEventArgs> SvgClick;
    public event EventHandler<MouseEventArgs> SvgMouseDown;
    public event EventHandler<MouseEventArgs> SvgMouseUp;
    public event EventHandler<MouseEventArgs> SvgMouseMove;
    public event EventHandler<WheelEventArgs> SvgMouseWheel;
    public event EventHandler<KeyboardEventArgs> SvgKeyDown;

    public event EventHandler<GraphMouseEventArgs<Node>> NodeClick;
    public event EventHandler<MouseEventArgs> NodeMouseDown;
    public event EventHandler<MouseEventArgs> NodeMouseUp;
    public event EventHandler<MouseEventArgs> NodeMouseMove;
    public event EventHandler<MouseEventArgs> NodeMouseWheel;
    DateTime NodeClickTriggerdTime;
    DateTime SvgClickTriggerdTime;

    public async Task UpdateSvgTransformationMatrix()
    {
        SVGMatrix = await GraphServeice.InitialGetGraphDisplayParameters(GraphModel.Name);
    }

    protected virtual void OnSvgClick(MouseEventArgs e)
    {

        EventHandler<MouseEventArgs> handler = SvgClick;
        if (handler != null && NodeClick == null)
        {
            handler(this, e);
        }
        else if (NodeClick != null && NodeClickTriggerdTime < DateTime.Now.AddMilliseconds(-100))
        {
            handler(this, e);
        }
    }
    protected virtual void OnSvgMouseDown(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = SvgMouseDown;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual void OnSvgMouseUp(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = SvgMouseUp;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual void OnSvgMouseMove(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = SvgMouseMove;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual void OnSvgMouseWheel(WheelEventArgs e)
    {
        EventHandler<WheelEventArgs> handler = SvgMouseWheel;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual async Task OnSvgKeyDown(KeyboardEventArgs e)
    {
        EventHandler<KeyboardEventArgs> handler = SvgKeyDown;
        if (handler != null)
        {
            handler(this, e);
        }
    }

    protected virtual void OnNodeClick(MouseEventArgs e, Node node)
    {
        EventHandler<GraphMouseEventArgs<Node>> handler = NodeClick;
        if (handler != null)
        {
            NodeClickTriggerdTime = DateTime.Now;
            handler(this, new GraphMouseEventArgs<Node>(node, e));
        }
    }
    protected virtual void OnNodeMouseDown(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = NodeMouseDown;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual void OnNodeMouseUp(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = NodeMouseUp;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual void OnNodeMouseMove(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = NodeMouseMove;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    protected virtual void OnNodeMouseWheel(MouseEventArgs e)
    {
        EventHandler<MouseEventArgs> handler = NodeMouseWheel;
        if (handler != null)
        {
            handler(this, e);
        }
    }
    #endregion

    public static void ActivateNode(BasicGraph sender, MouseEventArgs args)
    {
        var GraphModel = (BasicGraph)sender;
        if (GraphModel.GraphModel.ActiveNode != null)
        {
            GraphModel.GraphModel.ActiveNode.IsActive = false;
        }
    }
    public static async Task Zoom(BasicGraph sender, WheelEventArgs args)
    {
        await sender.UpdateSvgTransformationMatrix();
        if (sender.SVGMatrix != null)
        {

            if (args.DeltaY > 0)
            {
                sender.SVGViewRect.ZoomOut();
            }
            else
            {
                sender.SVGViewRect.ZoomIn();
            }
        }
    }

    public static async Task MoveNode(BasicGraph sender, MouseEventArgs args) {
        if (args.Buttons == 1)
        {
            if (sender.GraphModel.ActiveNode == null) return;
            await sender.UpdateSvgTransformationMatrix();
            if (sender.SVGMatrix != null && sender.GraphModel.ActiveNode.activeclass != "")
            {
                var deltaX = (args.ClientX - sender.SVGMatrix.E) / sender.SVGMatrix.A;
                var deltaY = (args.ClientY - sender.SVGMatrix.F) / sender.SVGMatrix.D;

                sender.GraphModel.ActiveNode.Pos.X = deltaX;
                sender.GraphModel.ActiveNode.Pos.Y = deltaY;
            }
        }
    }

    public static async Task MoveViewPoint(BasicGraph sender, MouseEventArgs args)
    {
        if (args.Buttons == 2)
        {
            //todo: Fix Positioning the Viewpoint
            await sender.UpdateSvgTransformationMatrix();
            if (sender.SVGMatrix != null)
            {
                var deltaX = (args.ClientX - sender.SVGMatrix.E) / sender.SVGMatrix.A;
                var deltaY = (args.ClientY - sender.SVGMatrix.F) / sender.SVGMatrix.D;

                sender.SVGViewRect.SetCenter(deltaX, deltaY);
            }
        }

    }
    public static async Task UpdateGraph(BasicGraph sender, MouseEventArgs args)
    {
        sender.StateHasChanged();
    }
    public static async Task MoveNode(BasicGraph sender, GraphMouseEventArgs<Node> args)
    {
        Node node = args.Target;
        if (sender.GraphModel.ActiveNode != null)
        {

            if (sender.GraphModel.ActiveNode.Id == node.Id)
            {
                node.IsActive = false;
            }
            else
            {
                sender.GraphModel.ActiveNode.IsActive = false;
                node.IsActive = true;
            }
        }
        else
        {
            node.IsActive = true;
        }
        sender.StateHasChanged();
    }
}

